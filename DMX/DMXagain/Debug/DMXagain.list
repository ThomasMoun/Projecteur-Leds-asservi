
DMXagain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004098  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004354  08004354  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800435c  0800435c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000070  080043d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  080043d4  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9e8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd0  00000000  00000000  0002da88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0002f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  000304d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013e7c  00000000  00000000  000310a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e555  00000000  00000000  00044f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d272  00000000  00000000  00053471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d06e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003878  00000000  00000000  000d0734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004250 	.word	0x08004250

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004250 	.word	0x08004250

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	b0b7      	sub	sp, #220	; 0xdc
 80005b8:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE BEGIN 1 */
	int sizeText;
	int i = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fc5a 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f880 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f9c4 	bl	8000954 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f998 	bl	8000900 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005d0:	f000 f96a 	bl	80008a8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80005d4:	f000 f8e4 	bl	80007a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
    sizeText = snprintf(uart2TxData,uart2TxRxSize,"Booting...\r\n");
 80005d8:	4a32      	ldr	r2, [pc, #200]	; (80006a4 <main+0xf0>)
 80005da:	2120      	movs	r1, #32
 80005dc:	4832      	ldr	r0, [pc, #200]	; (80006a8 <main+0xf4>)
 80005de:	f003 f9b5 	bl	800394c <sniprintf>
 80005e2:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  	HAL_UART_Transmit(&huart2, uart2TxData, sizeText, 100);
 80005e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	492e      	ldr	r1, [pc, #184]	; (80006a8 <main+0xf4>)
 80005f0:	482e      	ldr	r0, [pc, #184]	; (80006ac <main+0xf8>)
 80005f2:	f002 f942 	bl	800287a <HAL_UART_Transmit>
  	HAL_UART_Receive_IT(&huart2, uart2RxData, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	492d      	ldr	r1, [pc, #180]	; (80006b0 <main+0xfc>)
 80005fa:	482c      	ldr	r0, [pc, #176]	; (80006ac <main+0xf8>)
 80005fc:	f002 f9cf 	bl	800299e <HAL_UART_Receive_IT>
  	HAL_UART_Receive_IT(&huart1, &newData, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	492c      	ldr	r1, [pc, #176]	; (80006b4 <main+0x100>)
 8000604:	482c      	ldr	r0, [pc, #176]	; (80006b8 <main+0x104>)
 8000606:	f002 f9ca 	bl	800299e <HAL_UART_Receive_IT>
  	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 800060a:	2100      	movs	r1, #0
 800060c:	482b      	ldr	r0, [pc, #172]	; (80006bc <main+0x108>)
 800060e:	f001 fccb 	bl	8001fa8 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char stockage[136];
	  snprintf(stockage, 136, "DMX1: %d, DMX2: %d, DMX3: %d, DMX4: %d, DMX5: %d, DMX6: %d, DMX7: %d, DMX8: %d, DMX9: %d, DMX10: %d, DMX11: %d, DMX12: %d\r\n", data[1],data[2],data[3],data[4],data[5],data[6],data[7],data[8],data[9],data[10],data[11],data[12]);
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <main+0x10c>)
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	469c      	mov	ip, r3
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <main+0x10c>)
 800061a:	789b      	ldrb	r3, [r3, #2]
 800061c:	461a      	mov	r2, r3
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <main+0x10c>)
 8000620:	78db      	ldrb	r3, [r3, #3]
 8000622:	4619      	mov	r1, r3
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <main+0x10c>)
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	461c      	mov	r4, r3
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <main+0x10c>)
 800062c:	795b      	ldrb	r3, [r3, #5]
 800062e:	461d      	mov	r5, r3
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <main+0x10c>)
 8000632:	799b      	ldrb	r3, [r3, #6]
 8000634:	461e      	mov	r6, r3
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <main+0x10c>)
 8000638:	79db      	ldrb	r3, [r3, #7]
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <main+0x10c>)
 800063e:	7a1b      	ldrb	r3, [r3, #8]
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <main+0x10c>)
 8000644:	7a5b      	ldrb	r3, [r3, #9]
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <main+0x10c>)
 800064a:	7a9b      	ldrb	r3, [r3, #10]
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <main+0x10c>)
 8000650:	7adb      	ldrb	r3, [r3, #11]
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <main+0x10c>)
 8000656:	7b1b      	ldrb	r3, [r3, #12]
 8000658:	f107 0018 	add.w	r0, r7, #24
 800065c:	930a      	str	r3, [sp, #40]	; 0x28
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	9309      	str	r3, [sp, #36]	; 0x24
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	9308      	str	r3, [sp, #32]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	9307      	str	r3, [sp, #28]
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	9306      	str	r3, [sp, #24]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	9305      	str	r3, [sp, #20]
 8000672:	9604      	str	r6, [sp, #16]
 8000674:	9503      	str	r5, [sp, #12]
 8000676:	9402      	str	r4, [sp, #8]
 8000678:	9101      	str	r1, [sp, #4]
 800067a:	9200      	str	r2, [sp, #0]
 800067c:	4663      	mov	r3, ip
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <main+0x110>)
 8000680:	2188      	movs	r1, #136	; 0x88
 8000682:	f003 f963 	bl	800394c <sniprintf>
	  //HAL_UART_Transmit(&huart2, data,sizeof(data), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart2, stockage,sizeof(stockage), HAL_MAX_DELAY);
 8000686:	f107 0118 	add.w	r1, r7, #24
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2288      	movs	r2, #136	; 0x88
 8000690:	4806      	ldr	r0, [pc, #24]	; (80006ac <main+0xf8>)
 8000692:	f002 f8f2 	bl	800287a <HAL_UART_Transmit>

	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
	//i = (i+1)%990;
	//HAL_Delay(10);

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 4*data[1]); //on controle la LED avec le chanel 1
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <main+0x10c>)
 8000698:	785b      	ldrb	r3, [r3, #1]
 800069a:	009a      	lsls	r2, r3, #2
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <main+0x108>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	635a      	str	r2, [r3, #52]	; 0x34
  {
 80006a2:	e7b6      	b.n	8000612 <main+0x5e>
 80006a4:	08004268 	.word	0x08004268
 80006a8:	20000384 	.word	0x20000384
 80006ac:	20000118 	.word	0x20000118
 80006b0:	20000364 	.word	0x20000364
 80006b4:	2000035d 	.word	0x2000035d
 80006b8:	200000d4 	.word	0x200000d4
 80006bc:	2000008c 	.word	0x2000008c
 80006c0:	2000015c 	.word	0x2000015c
 80006c4:	08004278 	.word	0x08004278

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2234      	movs	r2, #52	; 0x34
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 f930 	bl	800393c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <SystemClock_Config+0xd0>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemClock_Config+0xd4>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemClock_Config+0xd4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000738:	2310      	movs	r3, #16
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800073c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000740:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000742:	2304      	movs	r3, #4
 8000744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000746:	2304      	movs	r3, #4
 8000748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f954 	bl	8001a00 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075e:	f000 f9c5 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f000 ff1e 	bl	80015c0 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800078a:	f000 f9af 	bl	8000aec <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	; 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b092      	sub	sp, #72	; 0x48
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2220      	movs	r2, #32
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 f8b6 	bl	800393c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d0:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <MX_TIM1_Init+0x100>)
 80007d2:	4a34      	ldr	r2, [pc, #208]	; (80008a4 <MX_TIM1_Init+0x104>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80007d6:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <MX_TIM1_Init+0x100>)
 80007d8:	2253      	movs	r2, #83	; 0x53
 80007da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <MX_TIM1_Init+0x100>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80007e2:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_TIM1_Init+0x100>)
 80007e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <MX_TIM1_Init+0x100>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_TIM1_Init+0x100>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <MX_TIM1_Init+0x100>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fc:	4828      	ldr	r0, [pc, #160]	; (80008a0 <MX_TIM1_Init+0x100>)
 80007fe:	f001 fb83 	bl	8001f08 <HAL_TIM_PWM_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000808:	f000 f970 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000818:	4619      	mov	r1, r3
 800081a:	4821      	ldr	r0, [pc, #132]	; (80008a0 <MX_TIM1_Init+0x100>)
 800081c:	f001 ff34 	bl	8002688 <HAL_TIMEx_MasterConfigSynchronization>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000826:	f000 f961 	bl	8000aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082a:	2360      	movs	r3, #96	; 0x60
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	2200      	movs	r2, #0
 800084c:	4619      	mov	r1, r3
 800084e:	4814      	ldr	r0, [pc, #80]	; (80008a0 <MX_TIM1_Init+0x100>)
 8000850:	f001 fc48 	bl	80020e4 <HAL_TIM_PWM_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800085a:	f000 f947 	bl	8000aec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000876:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4619      	mov	r1, r3
 8000880:	4807      	ldr	r0, [pc, #28]	; (80008a0 <MX_TIM1_Init+0x100>)
 8000882:	f001 ff5b 	bl	800273c <HAL_TIMEx_ConfigBreakDeadTime>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800088c:	f000 f92e 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <MX_TIM1_Init+0x100>)
 8000892:	f000 f97b 	bl	8000b8c <HAL_TIM_MspPostInit>

}
 8000896:	bf00      	nop
 8000898:	3748      	adds	r7, #72	; 0x48
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000008c 	.word	0x2000008c
 80008a4:	40010000 	.word	0x40010000

080008a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_USART1_UART_Init+0x50>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008b4:	4a11      	ldr	r2, [pc, #68]	; (80008fc <MX_USART1_UART_Init+0x54>)
 80008b6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008e0:	f001 ff7e 	bl	80027e0 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ea:	f000 f8ff 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000d4 	.word	0x200000d4
 80008f8:	40011000 	.word	0x40011000
 80008fc:	0003d090 	.word	0x0003d090

08000900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_USART2_UART_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000938:	f001 ff52 	bl	80027e0 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000942:	f000 f8d3 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000118 	.word	0x20000118
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <MX_GPIO_Init+0xd0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a2c      	ldr	r2, [pc, #176]	; (8000a24 <MX_GPIO_Init+0xd0>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_GPIO_Init+0xd0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a25      	ldr	r2, [pc, #148]	; (8000a24 <MX_GPIO_Init+0xd0>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <MX_GPIO_Init+0xd0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a1e      	ldr	r2, [pc, #120]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2120      	movs	r1, #32
 80009de:	4812      	ldr	r0, [pc, #72]	; (8000a28 <MX_GPIO_Init+0xd4>)
 80009e0:	f000 fdd4 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_GPIO_Init+0xd8>)
 80009fc:	f000 fc52 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a00:	2320      	movs	r3, #32
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_GPIO_Init+0xd4>)
 8000a18:	f000 fc44 	bl	80012a4 <HAL_GPIO_Init>

}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020800 	.word	0x40020800

08000a30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	int sizeText;
	if(huart->Instance==USART1){
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a20      	ldr	r2, [pc, #128]	; (8000ac0 <HAL_UART_RxCpltCallback+0x90>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d120      	bne.n	8000a84 <HAL_UART_RxCpltCallback+0x54>
		errorFlag = HAL_UART_GetError(&huart1);
 8000a42:	4820      	ldr	r0, [pc, #128]	; (8000ac4 <HAL_UART_RxCpltCallback+0x94>)
 8000a44:	f002 fa8a 	bl	8002f5c <HAL_UART_GetError>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <HAL_UART_RxCpltCallback+0x98>)
 8000a4e:	701a      	strb	r2, [r3, #0]
		if(errorFlag & HAL_UART_ERROR_FE){
 8000a50:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <HAL_UART_RxCpltCallback+0x98>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <HAL_UART_RxCpltCallback+0x34>
			dmxChannel = 0;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <HAL_UART_RxCpltCallback+0x9c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	801a      	strh	r2, [r3, #0]
 8000a62:	e00a      	b.n	8000a7a <HAL_UART_RxCpltCallback+0x4a>
		}
		else{
			data[dmxChannel++]=newData;
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_UART_RxCpltCallback+0x9c>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	b291      	uxth	r1, r2
 8000a6c:	4a17      	ldr	r2, [pc, #92]	; (8000acc <HAL_UART_RxCpltCallback+0x9c>)
 8000a6e:	8011      	strh	r1, [r2, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_UART_RxCpltCallback+0xa0>)
 8000a74:	7819      	ldrb	r1, [r3, #0]
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_UART_RxCpltCallback+0xa4>)
 8000a78:	5499      	strb	r1, [r3, r2]
		}
		HAL_UART_Receive_IT(&huart1, &newData, 1);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4914      	ldr	r1, [pc, #80]	; (8000ad0 <HAL_UART_RxCpltCallback+0xa0>)
 8000a7e:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <HAL_UART_RxCpltCallback+0x94>)
 8000a80:	f001 ff8d 	bl	800299e <HAL_UART_Receive_IT>
	}

	if(huart->Instance==USART2){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <HAL_UART_RxCpltCallback+0xa8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d113      	bne.n	8000ab6 <HAL_UART_RxCpltCallback+0x86>
		sizeText = snprintf(uart2TxData,uart2TxRxSize,"Data[1] = 0x%2x\r\n", data[1]);
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_UART_RxCpltCallback+0xa4>)
 8000a90:	785b      	ldrb	r3, [r3, #1]
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <HAL_UART_RxCpltCallback+0xac>)
 8000a94:	2120      	movs	r1, #32
 8000a96:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <HAL_UART_RxCpltCallback+0xb0>)
 8000a98:	f002 ff58 	bl	800394c <sniprintf>
 8000a9c:	60f8      	str	r0, [r7, #12]
		HAL_UART_Transmit(&huart2, uart2TxData, sizeText, 100);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	2364      	movs	r3, #100	; 0x64
 8000aa4:	490e      	ldr	r1, [pc, #56]	; (8000ae0 <HAL_UART_RxCpltCallback+0xb0>)
 8000aa6:	480f      	ldr	r0, [pc, #60]	; (8000ae4 <HAL_UART_RxCpltCallback+0xb4>)
 8000aa8:	f001 fee7 	bl	800287a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, uart2RxData, 1);
 8000aac:	2201      	movs	r2, #1
 8000aae:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <HAL_UART_RxCpltCallback+0xb8>)
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <HAL_UART_RxCpltCallback+0xb4>)
 8000ab2:	f001 ff74 	bl	800299e <HAL_UART_Receive_IT>
	}
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40011000 	.word	0x40011000
 8000ac4:	200000d4 	.word	0x200000d4
 8000ac8:	20000360 	.word	0x20000360
 8000acc:	2000035e 	.word	0x2000035e
 8000ad0:	2000035d 	.word	0x2000035d
 8000ad4:	2000015c 	.word	0x2000015c
 8000ad8:	40004400 	.word	0x40004400
 8000adc:	080042f4 	.word	0x080042f4
 8000ae0:	20000384 	.word	0x20000384
 8000ae4:	20000118 	.word	0x20000118
 8000ae8:	20000364 	.word	0x20000364

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b36:	2007      	movs	r0, #7
 8000b38:	f000 fae0 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d10d      	bne.n	8000b76 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_TIM_PWM_MspInit+0x40>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <HAL_TIM_PWM_MspInit+0x40>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <HAL_TIM_PWM_MspInit+0x40>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40010000 	.word	0x40010000
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <HAL_TIM_MspPostInit+0x68>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d11e      	bne.n	8000bec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_TIM_MspPostInit+0x6c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_TIM_MspPostInit+0x6c>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_TIM_MspPostInit+0x6c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000bca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4619      	mov	r1, r3
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <HAL_TIM_MspPostInit+0x70>)
 8000be8:	f000 fb5c 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40010000 	.word	0x40010000
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000

08000c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	; 0x30
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a3a      	ldr	r2, [pc, #232]	; (8000d08 <HAL_UART_MspInit+0x108>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d135      	bne.n	8000c8e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	4b39      	ldr	r3, [pc, #228]	; (8000d0c <HAL_UART_MspInit+0x10c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a38      	ldr	r2, [pc, #224]	; (8000d0c <HAL_UART_MspInit+0x10c>)
 8000c2c:	f043 0310 	orr.w	r3, r3, #16
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <HAL_UART_MspInit+0x10c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <HAL_UART_MspInit+0x10c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a31      	ldr	r2, [pc, #196]	; (8000d0c <HAL_UART_MspInit+0x10c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <HAL_UART_MspInit+0x10c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4826      	ldr	r0, [pc, #152]	; (8000d10 <HAL_UART_MspInit+0x110>)
 8000c78:	f000 fb14 	bl	80012a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2025      	movs	r0, #37	; 0x25
 8000c82:	f000 fa46 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c86:	2025      	movs	r0, #37	; 0x25
 8000c88:	f000 fa5f 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c8c:	e038      	b.n	8000d00 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a20      	ldr	r2, [pc, #128]	; (8000d14 <HAL_UART_MspInit+0x114>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d133      	bne.n	8000d00 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <HAL_UART_MspInit+0x10c>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	4a1a      	ldr	r2, [pc, #104]	; (8000d0c <HAL_UART_MspInit+0x10c>)
 8000ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_UART_MspInit+0x10c>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_UART_MspInit+0x10c>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <HAL_UART_MspInit+0x10c>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_UART_MspInit+0x10c>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4809      	ldr	r0, [pc, #36]	; (8000d10 <HAL_UART_MspInit+0x110>)
 8000cec:	f000 fada 	bl	80012a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2026      	movs	r0, #38	; 0x26
 8000cf6:	f000 fa0c 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cfa:	2026      	movs	r0, #38	; 0x26
 8000cfc:	f000 fa25 	bl	800114a <HAL_NVIC_EnableIRQ>
}
 8000d00:	bf00      	nop
 8000d02:	3730      	adds	r7, #48	; 0x30
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40011000 	.word	0x40011000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40004400 	.word	0x40004400

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f8da 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <USART1_IRQHandler+0x10>)
 8000d72:	f001 fe45 	bl	8002a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000d4 	.word	0x200000d4

08000d80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <USART2_IRQHandler+0x10>)
 8000d86:	f001 fe3b 	bl	8002a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000118 	.word	0x20000118

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f002 fd90 	bl	80038e8 <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20008000 	.word	0x20008000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	200003a4 	.word	0x200003a4
 8000dfc:	200003c0 	.word	0x200003c0

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2a:	490e      	ldr	r1, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e4e:	f7ff ffd7 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f002 fd4f 	bl	80038f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fbad 	bl	80005b4 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e68:	08004364 	.word	0x08004364
  ldr r2, =_sbss
 8000e6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e70:	200003bc 	.word	0x200003bc

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f92b 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fe24 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f943 	bl	8001166 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f90b 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	200003a8 	.word	0x200003a8

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200003a8 	.word	0x200003a8

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	db0b      	blt.n	8000fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 021f 	and.w	r2, r3, #31
 8000fd8:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <__NVIC_EnableIRQ+0x38>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff8e 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff29 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff3e 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff8e 	bl	8001050 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5d 	bl	8000ffc <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff31 	bl	8000fc0 <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa2 	bl	80010b8 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff feda 	bl	8000f44 <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d008      	beq.n	80011b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e052      	b.n	8001256 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0216 	bic.w	r2, r2, #22
 80011be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d103      	bne.n	80011e0 <HAL_DMA_Abort+0x62>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0208 	bic.w	r2, r2, #8
 80011ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0201 	bic.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001200:	e013      	b.n	800122a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001202:	f7ff fe9f 	bl	8000f44 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b05      	cmp	r3, #5
 800120e:	d90c      	bls.n	800122a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2220      	movs	r2, #32
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2203      	movs	r2, #3
 800121a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e015      	b.n	8001256 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1e4      	bne.n	8001202 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123c:	223f      	movs	r2, #63	; 0x3f
 800123e:	409a      	lsls	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d004      	beq.n	800127c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e00c      	b.n	8001296 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2205      	movs	r2, #5
 8001280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0201 	bic.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	e14d      	b.n	800155c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	429a      	cmp	r2, r3
 80012da:	f040 813c 	bne.w	8001556 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d005      	beq.n	80012f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d130      	bne.n	8001358 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800132c:	2201      	movs	r2, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f003 0201 	and.w	r2, r3, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b03      	cmp	r3, #3
 8001362:	d017      	beq.n	8001394 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d123      	bne.n	80013e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	220f      	movs	r2, #15
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	69b9      	ldr	r1, [r7, #24]
 80013e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0203 	and.w	r2, r3, #3
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 8096 	beq.w	8001556 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b51      	ldr	r3, [pc, #324]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a50      	ldr	r2, [pc, #320]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b4e      	ldr	r3, [pc, #312]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001446:	4a4c      	ldr	r2, [pc, #304]	; (8001578 <HAL_GPIO_Init+0x2d4>)
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	089b      	lsrs	r3, r3, #2
 800144c:	3302      	adds	r3, #2
 800144e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a43      	ldr	r2, [pc, #268]	; (800157c <HAL_GPIO_Init+0x2d8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00d      	beq.n	800148e <HAL_GPIO_Init+0x1ea>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a42      	ldr	r2, [pc, #264]	; (8001580 <HAL_GPIO_Init+0x2dc>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x1e6>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a41      	ldr	r2, [pc, #260]	; (8001584 <HAL_GPIO_Init+0x2e0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_GPIO_Init+0x1e2>
 8001482:	2302      	movs	r3, #2
 8001484:	e004      	b.n	8001490 <HAL_GPIO_Init+0x1ec>
 8001486:	2307      	movs	r3, #7
 8001488:	e002      	b.n	8001490 <HAL_GPIO_Init+0x1ec>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_GPIO_Init+0x1ec>
 800148e:	2300      	movs	r3, #0
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	f002 0203 	and.w	r2, r2, #3
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	4093      	lsls	r3, r2
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a0:	4935      	ldr	r1, [pc, #212]	; (8001578 <HAL_GPIO_Init+0x2d4>)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	3302      	adds	r3, #2
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ae:	4b36      	ldr	r3, [pc, #216]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014d2:	4a2d      	ldr	r2, [pc, #180]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d8:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014fc:	4a22      	ldr	r2, [pc, #136]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001502:	4b21      	ldr	r3, [pc, #132]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001526:	4a18      	ldr	r2, [pc, #96]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	2b0f      	cmp	r3, #15
 8001560:	f67f aeae 	bls.w	80012c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40013800 	.word	0x40013800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020400 	.word	0x40020400
 8001584:	40020800 	.word	0x40020800
 8001588:	40013c00 	.word	0x40013c00

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a8:	e003      	b.n	80015b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	041a      	lsls	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	619a      	str	r2, [r3, #24]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0cc      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d4:	4b68      	ldr	r3, [pc, #416]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d90c      	bls.n	80015fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	4b65      	ldr	r3, [pc, #404]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0b8      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001614:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4a58      	ldr	r2, [pc, #352]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800161e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800162c:	4b53      	ldr	r3, [pc, #332]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a52      	ldr	r2, [pc, #328]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	4b50      	ldr	r3, [pc, #320]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	494d      	ldr	r1, [pc, #308]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d044      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d119      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e07f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d003      	beq.n	800167e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800167a:	2b03      	cmp	r3, #3
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e06f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e067      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f023 0203 	bic.w	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4934      	ldr	r1, [pc, #208]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b0:	f7ff fc48 	bl	8000f44 <HAL_GetTick>
 80016b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b8:	f7ff fc44 	bl	8000f44 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e04f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	4b2b      	ldr	r3, [pc, #172]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 020c 	and.w	r2, r3, #12
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	429a      	cmp	r2, r3
 80016de:	d1eb      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e0:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d20c      	bcs.n	8001708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e032      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	4916      	ldr	r1, [pc, #88]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	490e      	ldr	r1, [pc, #56]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001746:	f000 f821 	bl	800178c <HAL_RCC_GetSysClockFreq>
 800174a:	4602      	mov	r2, r0
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	490a      	ldr	r1, [pc, #40]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	5ccb      	ldrb	r3, [r1, r3]
 800175a:	fa22 f303 	lsr.w	r3, r2, r3
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x1c8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fba8 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00
 800177c:	40023800 	.word	0x40023800
 8001780:	08004308 	.word	0x08004308
 8001784:	20000000 	.word	0x20000000
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800178c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001790:	b094      	sub	sp, #80	; 0x50
 8001792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	647b      	str	r3, [r7, #68]	; 0x44
 8001798:	2300      	movs	r3, #0
 800179a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800179c:	2300      	movs	r3, #0
 800179e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017a4:	4b79      	ldr	r3, [pc, #484]	; (800198c <HAL_RCC_GetSysClockFreq+0x200>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d00d      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0x40>
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	f200 80e1 	bhi.w	8001978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x34>
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d003      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017be:	e0db      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b73      	ldr	r3, [pc, #460]	; (8001990 <HAL_RCC_GetSysClockFreq+0x204>)
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017c4:	e0db      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017c6:	4b73      	ldr	r3, [pc, #460]	; (8001994 <HAL_RCC_GetSysClockFreq+0x208>)
 80017c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017ca:	e0d8      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017cc:	4b6f      	ldr	r3, [pc, #444]	; (800198c <HAL_RCC_GetSysClockFreq+0x200>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d6:	4b6d      	ldr	r3, [pc, #436]	; (800198c <HAL_RCC_GetSysClockFreq+0x200>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d063      	beq.n	80018aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e2:	4b6a      	ldr	r3, [pc, #424]	; (800198c <HAL_RCC_GetSysClockFreq+0x200>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	2200      	movs	r2, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80017ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
 80017f6:	2300      	movs	r3, #0
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
 80017fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017fe:	4622      	mov	r2, r4
 8001800:	462b      	mov	r3, r5
 8001802:	f04f 0000 	mov.w	r0, #0
 8001806:	f04f 0100 	mov.w	r1, #0
 800180a:	0159      	lsls	r1, r3, #5
 800180c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001810:	0150      	lsls	r0, r2, #5
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4621      	mov	r1, r4
 8001818:	1a51      	subs	r1, r2, r1
 800181a:	6139      	str	r1, [r7, #16]
 800181c:	4629      	mov	r1, r5
 800181e:	eb63 0301 	sbc.w	r3, r3, r1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001830:	4659      	mov	r1, fp
 8001832:	018b      	lsls	r3, r1, #6
 8001834:	4651      	mov	r1, sl
 8001836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800183a:	4651      	mov	r1, sl
 800183c:	018a      	lsls	r2, r1, #6
 800183e:	4651      	mov	r1, sl
 8001840:	ebb2 0801 	subs.w	r8, r2, r1
 8001844:	4659      	mov	r1, fp
 8001846:	eb63 0901 	sbc.w	r9, r3, r1
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800185a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800185e:	4690      	mov	r8, r2
 8001860:	4699      	mov	r9, r3
 8001862:	4623      	mov	r3, r4
 8001864:	eb18 0303 	adds.w	r3, r8, r3
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	462b      	mov	r3, r5
 800186c:	eb49 0303 	adc.w	r3, r9, r3
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800187e:	4629      	mov	r1, r5
 8001880:	024b      	lsls	r3, r1, #9
 8001882:	4621      	mov	r1, r4
 8001884:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001888:	4621      	mov	r1, r4
 800188a:	024a      	lsls	r2, r1, #9
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001892:	2200      	movs	r2, #0
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
 8001896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800189c:	f7fe fd08 	bl	80002b0 <__aeabi_uldivmod>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4613      	mov	r3, r2
 80018a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018a8:	e058      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_RCC_GetSysClockFreq+0x200>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	099b      	lsrs	r3, r3, #6
 80018b0:	2200      	movs	r2, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	4611      	mov	r1, r2
 80018b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018ba:	623b      	str	r3, [r7, #32]
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
 80018c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018c4:	4642      	mov	r2, r8
 80018c6:	464b      	mov	r3, r9
 80018c8:	f04f 0000 	mov.w	r0, #0
 80018cc:	f04f 0100 	mov.w	r1, #0
 80018d0:	0159      	lsls	r1, r3, #5
 80018d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d6:	0150      	lsls	r0, r2, #5
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4641      	mov	r1, r8
 80018de:	ebb2 0a01 	subs.w	sl, r2, r1
 80018e2:	4649      	mov	r1, r9
 80018e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018fc:	ebb2 040a 	subs.w	r4, r2, sl
 8001900:	eb63 050b 	sbc.w	r5, r3, fp
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	00eb      	lsls	r3, r5, #3
 800190e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001912:	00e2      	lsls	r2, r4, #3
 8001914:	4614      	mov	r4, r2
 8001916:	461d      	mov	r5, r3
 8001918:	4643      	mov	r3, r8
 800191a:	18e3      	adds	r3, r4, r3
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	464b      	mov	r3, r9
 8001920:	eb45 0303 	adc.w	r3, r5, r3
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001932:	4629      	mov	r1, r5
 8001934:	028b      	lsls	r3, r1, #10
 8001936:	4621      	mov	r1, r4
 8001938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800193c:	4621      	mov	r1, r4
 800193e:	028a      	lsls	r2, r1, #10
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001946:	2200      	movs	r2, #0
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	61fa      	str	r2, [r7, #28]
 800194c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001950:	f7fe fcae 	bl	80002b0 <__aeabi_uldivmod>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4613      	mov	r3, r2
 800195a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <HAL_RCC_GetSysClockFreq+0x200>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	0c1b      	lsrs	r3, r3, #16
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	3301      	adds	r3, #1
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800196c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800196e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001970:	fbb2 f3f3 	udiv	r3, r2, r3
 8001974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001976:	e002      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_RCC_GetSysClockFreq+0x204>)
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800197c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800197e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001980:	4618      	mov	r0, r3
 8001982:	3750      	adds	r7, #80	; 0x50
 8001984:	46bd      	mov	sp, r7
 8001986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	00f42400 	.word	0x00f42400
 8001994:	007a1200 	.word	0x007a1200

08001998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_RCC_GetHCLKFreq+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000000 	.word	0x20000000

080019b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019b4:	f7ff fff0 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	0a9b      	lsrs	r3, r3, #10
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	4903      	ldr	r1, [pc, #12]	; (80019d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019c6:	5ccb      	ldrb	r3, [r1, r3]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	08004318 	.word	0x08004318

080019d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019dc:	f7ff ffdc 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	0b5b      	lsrs	r3, r3, #13
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	4903      	ldr	r1, [pc, #12]	; (80019fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	08004318 	.word	0x08004318

08001a00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e273      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d075      	beq.n	8001b0a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a1e:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d00c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a2a:	4b85      	ldr	r3, [pc, #532]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d112      	bne.n	8001a5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a36:	4b82      	ldr	r3, [pc, #520]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a42:	d10b      	bne.n	8001a5c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	4b7e      	ldr	r3, [pc, #504]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d05b      	beq.n	8001b08 <HAL_RCC_OscConfig+0x108>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d157      	bne.n	8001b08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e24e      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a64:	d106      	bne.n	8001a74 <HAL_RCC_OscConfig+0x74>
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a75      	ldr	r2, [pc, #468]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e01d      	b.n	8001ab0 <HAL_RCC_OscConfig+0xb0>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x98>
 8001a7e:	4b70      	ldr	r3, [pc, #448]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a6f      	ldr	r2, [pc, #444]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b6d      	ldr	r3, [pc, #436]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a6c      	ldr	r2, [pc, #432]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0xb0>
 8001a98:	4b69      	ldr	r3, [pc, #420]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a68      	ldr	r2, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b66      	ldr	r3, [pc, #408]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a65      	ldr	r2, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d013      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fa44 	bl	8000f44 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7ff fa40 	bl	8000f44 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e213      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xc0>
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fa30 	bl	8000f44 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff fa2c 	bl	8000f44 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e1ff      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afa:	4b51      	ldr	r3, [pc, #324]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xe8>
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d063      	beq.n	8001bde <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b16:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d11c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2e:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d116      	bne.n	8001b68 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x152>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e1d3      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b52:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4937      	ldr	r1, [pc, #220]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	e03a      	b.n	8001bde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d020      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <HAL_RCC_OscConfig+0x244>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff f9e5 	bl	8000f44 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7ff f9e1 	bl	8000f44 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e1b4      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9c:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4925      	ldr	r1, [pc, #148]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
 8001bb0:	e015      	b.n	8001bde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb2:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <HAL_RCC_OscConfig+0x244>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff f9c4 	bl	8000f44 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff f9c0 	bl	8000f44 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e193      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d036      	beq.n	8001c58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d016      	beq.n	8001c20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_RCC_OscConfig+0x248>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff f9a4 	bl	8000f44 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c00:	f7ff f9a0 	bl	8000f44 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e173      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x200>
 8001c1e:	e01b      	b.n	8001c58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_OscConfig+0x248>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c26:	f7ff f98d 	bl	8000f44 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	e00e      	b.n	8001c4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f989 	bl	8000f44 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d907      	bls.n	8001c4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e15c      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
 8001c40:	40023800 	.word	0x40023800
 8001c44:	42470000 	.word	0x42470000
 8001c48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4c:	4b8a      	ldr	r3, [pc, #552]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ea      	bne.n	8001c2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 8097 	beq.w	8001d94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6a:	4b83      	ldr	r3, [pc, #524]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10f      	bne.n	8001c96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	4b7f      	ldr	r3, [pc, #508]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a7e      	ldr	r2, [pc, #504]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b7c      	ldr	r3, [pc, #496]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c92:	2301      	movs	r3, #1
 8001c94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	4b79      	ldr	r3, [pc, #484]	; (8001e7c <HAL_RCC_OscConfig+0x47c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d118      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x47c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a75      	ldr	r2, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x47c>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cae:	f7ff f949 	bl	8000f44 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb6:	f7ff f945 	bl	8000f44 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e118      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	4b6c      	ldr	r3, [pc, #432]	; (8001e7c <HAL_RCC_OscConfig+0x47c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x2ea>
 8001cdc:	4b66      	ldr	r3, [pc, #408]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	4a65      	ldr	r2, [pc, #404]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce8:	e01c      	b.n	8001d24 <HAL_RCC_OscConfig+0x324>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x30c>
 8001cf2:	4b61      	ldr	r3, [pc, #388]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf6:	4a60      	ldr	r2, [pc, #384]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfe:	4b5e      	ldr	r3, [pc, #376]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	4a5d      	ldr	r2, [pc, #372]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0x324>
 8001d0c:	4b5a      	ldr	r3, [pc, #360]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	4a59      	ldr	r2, [pc, #356]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d12:	f023 0301 	bic.w	r3, r3, #1
 8001d16:	6713      	str	r3, [r2, #112]	; 0x70
 8001d18:	4b57      	ldr	r3, [pc, #348]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	4a56      	ldr	r2, [pc, #344]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d1e:	f023 0304 	bic.w	r3, r3, #4
 8001d22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d015      	beq.n	8001d58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff f90a 	bl	8000f44 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7ff f906 	bl	8000f44 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e0d7      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4a:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0ee      	beq.n	8001d34 <HAL_RCC_OscConfig+0x334>
 8001d56:	e014      	b.n	8001d82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff f8f4 	bl	8000f44 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7ff f8f0 	bl	8000f44 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0c1      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d76:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1ee      	bne.n	8001d60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d105      	bne.n	8001d94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d88:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	4a3a      	ldr	r2, [pc, #232]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80ad 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d9e:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d060      	beq.n	8001e6c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d145      	bne.n	8001e3e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <HAL_RCC_OscConfig+0x480>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff f8c4 	bl	8000f44 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff f8c0 	bl	8000f44 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e093      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	019b      	lsls	r3, r3, #6
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	085b      	lsrs	r3, r3, #1
 8001df6:	3b01      	subs	r3, #1
 8001df8:	041b      	lsls	r3, r3, #16
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	061b      	lsls	r3, r3, #24
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	071b      	lsls	r3, r3, #28
 8001e0a:	491b      	ldr	r1, [pc, #108]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x480>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7ff f895 	bl	8000f44 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7ff f891 	bl	8000f44 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e064      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x41e>
 8001e3c:	e05c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_RCC_OscConfig+0x480>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff f87e 	bl	8000f44 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff f87a 	bl	8000f44 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e04d      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x44c>
 8001e6a:	e045      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e040      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e84:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d030      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d129      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d122      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d119      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d10f      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e041      	b.n	8001f9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fe0a 	bl	8000b48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3304      	adds	r3, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f000 f98e 	bl	8002268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d109      	bne.n	8001fcc <HAL_TIM_PWM_Start+0x24>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	e022      	b.n	8002012 <HAL_TIM_PWM_Start+0x6a>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d109      	bne.n	8001fe6 <HAL_TIM_PWM_Start+0x3e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	e015      	b.n	8002012 <HAL_TIM_PWM_Start+0x6a>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d109      	bne.n	8002000 <HAL_TIM_PWM_Start+0x58>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	bf14      	ite	ne
 8001ff8:	2301      	movne	r3, #1
 8001ffa:	2300      	moveq	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e008      	b.n	8002012 <HAL_TIM_PWM_Start+0x6a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b01      	cmp	r3, #1
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e059      	b.n	80020ce <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d104      	bne.n	800202a <HAL_TIM_PWM_Start+0x82>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002028:	e013      	b.n	8002052 <HAL_TIM_PWM_Start+0xaa>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b04      	cmp	r3, #4
 800202e:	d104      	bne.n	800203a <HAL_TIM_PWM_Start+0x92>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002038:	e00b      	b.n	8002052 <HAL_TIM_PWM_Start+0xaa>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b08      	cmp	r3, #8
 800203e:	d104      	bne.n	800204a <HAL_TIM_PWM_Start+0xa2>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002048:	e003      	b.n	8002052 <HAL_TIM_PWM_Start+0xaa>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2201      	movs	r2, #1
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 faee 	bl	800263c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <HAL_TIM_PWM_Start+0x130>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d107      	bne.n	800207a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002078:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_TIM_PWM_Start+0x130>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d009      	beq.n	8002098 <HAL_TIM_PWM_Start+0xf0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_TIM_PWM_Start+0x134>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d004      	beq.n	8002098 <HAL_TIM_PWM_Start+0xf0>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <HAL_TIM_PWM_Start+0x138>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d111      	bne.n	80020bc <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d010      	beq.n	80020cc <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ba:	e007      	b.n	80020cc <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40010000 	.word	0x40010000
 80020dc:	40000c00 	.word	0x40000c00
 80020e0:	40014000 	.word	0x40014000

080020e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020fe:	2302      	movs	r3, #2
 8002100:	e0ae      	b.n	8002260 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b0c      	cmp	r3, #12
 800210e:	f200 809f 	bhi.w	8002250 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	0800214d 	.word	0x0800214d
 800211c:	08002251 	.word	0x08002251
 8002120:	08002251 	.word	0x08002251
 8002124:	08002251 	.word	0x08002251
 8002128:	0800218d 	.word	0x0800218d
 800212c:	08002251 	.word	0x08002251
 8002130:	08002251 	.word	0x08002251
 8002134:	08002251 	.word	0x08002251
 8002138:	080021cf 	.word	0x080021cf
 800213c:	08002251 	.word	0x08002251
 8002140:	08002251 	.word	0x08002251
 8002144:	08002251 	.word	0x08002251
 8002148:	0800220f 	.word	0x0800220f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f8e6 	bl	8002324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0208 	orr.w	r2, r2, #8
 8002166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0204 	bic.w	r2, r2, #4
 8002176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6999      	ldr	r1, [r3, #24]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	619a      	str	r2, [r3, #24]
      break;
 800218a:	e064      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f92c 	bl	80023f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6999      	ldr	r1, [r3, #24]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	021a      	lsls	r2, r3, #8
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	619a      	str	r2, [r3, #24]
      break;
 80021cc:	e043      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 f977 	bl	80024c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0208 	orr.w	r2, r2, #8
 80021e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0204 	bic.w	r2, r2, #4
 80021f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69d9      	ldr	r1, [r3, #28]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	61da      	str	r2, [r3, #28]
      break;
 800220c:	e023      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f9c1 	bl	800259c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69d9      	ldr	r1, [r3, #28]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	021a      	lsls	r2, r3, #8
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	61da      	str	r2, [r3, #28]
      break;
 800224e:	e002      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	75fb      	strb	r3, [r7, #23]
      break;
 8002254:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800225e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a26      	ldr	r2, [pc, #152]	; (8002314 <TIM_Base_SetConfig+0xac>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d003      	beq.n	8002288 <TIM_Base_SetConfig+0x20>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a25      	ldr	r2, [pc, #148]	; (8002318 <TIM_Base_SetConfig+0xb0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d108      	bne.n	800229a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <TIM_Base_SetConfig+0xac>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00b      	beq.n	80022ba <TIM_Base_SetConfig+0x52>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <TIM_Base_SetConfig+0xb0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <TIM_Base_SetConfig+0x52>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <TIM_Base_SetConfig+0xb4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d003      	beq.n	80022ba <TIM_Base_SetConfig+0x52>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <TIM_Base_SetConfig+0xb8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d108      	bne.n	80022cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <TIM_Base_SetConfig+0xac>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d103      	bne.n	8002300 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	615a      	str	r2, [r3, #20]
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40010000 	.word	0x40010000
 8002318:	40000c00 	.word	0x40000c00
 800231c:	40014000 	.word	0x40014000
 8002320:	40014800 	.word	0x40014800

08002324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f023 0201 	bic.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 0303 	bic.w	r3, r3, #3
 800235a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f023 0302 	bic.w	r3, r3, #2
 800236c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <TIM_OC1_SetConfig+0xc8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d10c      	bne.n	800239a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f023 0308 	bic.w	r3, r3, #8
 8002386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a13      	ldr	r2, [pc, #76]	; (80023ec <TIM_OC1_SetConfig+0xc8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d111      	bne.n	80023c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	621a      	str	r2, [r3, #32]
}
 80023e0:	bf00      	nop
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40010000 	.word	0x40010000

080023f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	f023 0210 	bic.w	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800241e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f023 0320 	bic.w	r3, r3, #32
 800243a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <TIM_OC2_SetConfig+0xd4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d10d      	bne.n	800246c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800246a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <TIM_OC2_SetConfig+0xd4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d113      	bne.n	800249c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800247a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	621a      	str	r2, [r3, #32]
}
 80024b6:	bf00      	nop
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40010000 	.word	0x40010000

080024c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <TIM_OC3_SetConfig+0xd0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d10d      	bne.n	8002542 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800252c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a14      	ldr	r2, [pc, #80]	; (8002598 <TIM_OC3_SetConfig+0xd0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d113      	bne.n	8002572 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	621a      	str	r2, [r3, #32]
}
 800258c:	bf00      	nop
 800258e:	371c      	adds	r7, #28
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	40010000 	.word	0x40010000

0800259c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	031b      	lsls	r3, r3, #12
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <TIM_OC4_SetConfig+0x9c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d109      	bne.n	8002610 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	019b      	lsls	r3, r3, #6
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	621a      	str	r2, [r3, #32]
}
 800262a:	bf00      	nop
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40010000 	.word	0x40010000

0800263c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	2201      	movs	r2, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a1a      	ldr	r2, [r3, #32]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	43db      	mvns	r3, r3
 800265e:	401a      	ands	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a1a      	ldr	r2, [r3, #32]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	621a      	str	r2, [r3, #32]
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800269c:	2302      	movs	r3, #2
 800269e:	e041      	b.n	8002724 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a14      	ldr	r2, [pc, #80]	; (8002730 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a12      	ldr	r2, [pc, #72]	; (8002734 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a11      	ldr	r2, [pc, #68]	; (8002738 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d10c      	bne.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	4313      	orrs	r3, r2
 8002708:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	40010000 	.word	0x40010000
 8002734:	40000c00 	.word	0x40000c00
 8002738:	40014000 	.word	0x40014000

0800273c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002754:	2302      	movs	r3, #2
 8002756:	e03d      	b.n	80027d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e03f      	b.n	8002872 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe f9fa 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002822:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fdeb 	bl	8003400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002838:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002848:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002858:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b08a      	sub	sp, #40	; 0x28
 800287e:	af02      	add	r7, sp, #8
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b20      	cmp	r3, #32
 8002898:	d17c      	bne.n	8002994 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_UART_Transmit+0x2c>
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e075      	b.n	8002996 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_UART_Transmit+0x3e>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e06e      	b.n	8002996 <HAL_UART_Transmit+0x11c>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2221      	movs	r2, #33	; 0x21
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ce:	f7fe fb39 	bl	8000f44 <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	88fa      	ldrh	r2, [r7, #6]
 80028d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	88fa      	ldrh	r2, [r7, #6]
 80028de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e8:	d108      	bne.n	80028fc <HAL_UART_Transmit+0x82>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d104      	bne.n	80028fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e003      	b.n	8002904 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800290c:	e02a      	b.n	8002964 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fb2b 	bl	8002f74 <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e036      	b.n	8002996 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10b      	bne.n	8002946 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800293c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	3302      	adds	r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	e007      	b.n	8002956 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	3301      	adds	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1cf      	bne.n	800290e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	2140      	movs	r1, #64	; 0x40
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fafb 	bl	8002f74 <UART_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e006      	b.n	8002996 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	4613      	mov	r3, r2
 80029aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d11d      	bne.n	80029f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_UART_Receive_IT+0x26>
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e016      	b.n	80029f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_UART_Receive_IT+0x38>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e00f      	b.n	80029f6 <HAL_UART_Receive_IT+0x58>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fb30 	bl	8003050 <UART_Start_Receive_IT>
 80029f0:	4603      	mov	r3, r0
 80029f2:	e000      	b.n	80029f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0ba      	sub	sp, #232	; 0xe8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_UART_IRQHandler+0x66>
 8002a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fc13 	bl	800328a <UART_Receive_IT>
      return;
 8002a64:	e256      	b.n	8002f14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80de 	beq.w	8002c2c <HAL_UART_IRQHandler+0x22c>
 8002a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d106      	bne.n	8002a8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80d1 	beq.w	8002c2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_UART_IRQHandler+0xae>
 8002a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xd2>
 8002aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f043 0202 	orr.w	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_UART_IRQHandler+0xf6>
 8002ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f043 0204 	orr.w	r2, r3, #4
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d011      	beq.n	8002b26 <HAL_UART_IRQHandler+0x126>
 8002b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d105      	bne.n	8002b1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f043 0208 	orr.w	r2, r3, #8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 81ed 	beq.w	8002f0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_UART_IRQHandler+0x14e>
 8002b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fb9e 	bl	800328a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b58:	2b40      	cmp	r3, #64	; 0x40
 8002b5a:	bf0c      	ite	eq
 8002b5c:	2301      	moveq	r3, #1
 8002b5e:	2300      	movne	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d103      	bne.n	8002b7a <HAL_UART_IRQHandler+0x17a>
 8002b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d04f      	beq.n	8002c1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 faa6 	bl	80030cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d141      	bne.n	8002c12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3314      	adds	r3, #20
 8002b94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3314      	adds	r3, #20
 8002bb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1d9      	bne.n	8002b8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d013      	beq.n	8002c0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	4a7d      	ldr	r2, [pc, #500]	; (8002ddc <HAL_UART_IRQHandler+0x3dc>)
 8002be8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fb35 	bl	800125e <HAL_DMA_Abort_IT>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d016      	beq.n	8002c28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c04:	4610      	mov	r0, r2
 8002c06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	e00e      	b.n	8002c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f990 	bl	8002f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c10:	e00a      	b.n	8002c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f98c 	bl	8002f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c18:	e006      	b.n	8002c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f988 	bl	8002f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c26:	e170      	b.n	8002f0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c28:	bf00      	nop
    return;
 8002c2a:	e16e      	b.n	8002f0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	f040 814a 	bne.w	8002eca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8143 	beq.w	8002eca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 813c 	beq.w	8002eca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	f040 80b4 	bne.w	8002de0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8140 	beq.w	8002f0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c96:	429a      	cmp	r2, r3
 8002c98:	f080 8139 	bcs.w	8002f0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ca2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cae:	f000 8088 	beq.w	8002dc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	330c      	adds	r3, #12
 8002cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cc0:	e853 3f00 	ldrex	r3, [r3]
 8002cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002cde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cee:	e841 2300 	strex	r3, r2, [r1]
 8002cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1d9      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3314      	adds	r3, #20
 8002d04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3314      	adds	r3, #20
 8002d1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d2e:	e841 2300 	strex	r3, r2, [r1]
 8002d32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e1      	bne.n	8002cfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3314      	adds	r3, #20
 8002d40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3314      	adds	r3, #20
 8002d5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d66:	e841 2300 	strex	r3, r2, [r1]
 8002d6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1e3      	bne.n	8002d3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330c      	adds	r3, #12
 8002d86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8a:	e853 3f00 	ldrex	r3, [r3]
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d92:	f023 0310 	bic.w	r3, r3, #16
 8002d96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	330c      	adds	r3, #12
 8002da0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002da4:	65ba      	str	r2, [r7, #88]	; 0x58
 8002da6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002daa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dac:	e841 2300 	strex	r3, r2, [r1]
 8002db0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e3      	bne.n	8002d80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe f9de 	bl	800117e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f8b6 	bl	8002f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dd8:	e099      	b.n	8002f0e <HAL_UART_IRQHandler+0x50e>
 8002dda:	bf00      	nop
 8002ddc:	08003193 	.word	0x08003193
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 808b 	beq.w	8002f12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8086 	beq.w	8002f12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	330c      	adds	r3, #12
 8002e26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e2a:	647a      	str	r2, [r7, #68]	; 0x44
 8002e2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e3      	bne.n	8002e06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3314      	adds	r3, #20
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3314      	adds	r3, #20
 8002e5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e62:	633a      	str	r2, [r7, #48]	; 0x30
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6a:	e841 2300 	strex	r3, r2, [r1]
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1e3      	bne.n	8002e3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0310 	bic.w	r3, r3, #16
 8002e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ea8:	61fa      	str	r2, [r7, #28]
 8002eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eac:	69b9      	ldr	r1, [r7, #24]
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	e841 2300 	strex	r3, r2, [r1]
 8002eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e3      	bne.n	8002e84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f83e 	bl	8002f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ec8:	e023      	b.n	8002f12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_UART_IRQHandler+0x4ea>
 8002ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f969 	bl	80031ba <UART_Transmit_IT>
    return;
 8002ee8:	e014      	b.n	8002f14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00e      	beq.n	8002f14 <HAL_UART_IRQHandler+0x514>
 8002ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f9a9 	bl	800325a <UART_EndTransmit_IT>
    return;
 8002f08:	e004      	b.n	8002f14 <HAL_UART_IRQHandler+0x514>
    return;
 8002f0a:	bf00      	nop
 8002f0c:	e002      	b.n	8002f14 <HAL_UART_IRQHandler+0x514>
      return;
 8002f0e:	bf00      	nop
 8002f10:	e000      	b.n	8002f14 <HAL_UART_IRQHandler+0x514>
      return;
 8002f12:	bf00      	nop
  }
}
 8002f14:	37e8      	adds	r7, #232	; 0xe8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop

08002f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b090      	sub	sp, #64	; 0x40
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f84:	e050      	b.n	8003028 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d04c      	beq.n	8003028 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f94:	f7fd ffd6 	bl	8000f44 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d241      	bcs.n	8003028 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	330c      	adds	r3, #12
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	e853 3f00 	ldrex	r3, [r3]
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fc4:	637a      	str	r2, [r7, #52]	; 0x34
 8002fc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fcc:	e841 2300 	strex	r3, r2, [r1]
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1e5      	bne.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3314      	adds	r3, #20
 8002fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	e853 3f00 	ldrex	r3, [r3]
 8002fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f023 0301 	bic.w	r3, r3, #1
 8002fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3314      	adds	r3, #20
 8002ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ff8:	623a      	str	r2, [r7, #32]
 8002ffa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	69f9      	ldr	r1, [r7, #28]
 8002ffe:	6a3a      	ldr	r2, [r7, #32]
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	61bb      	str	r3, [r7, #24]
   return(result);
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e5      	bne.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e00f      	b.n	8003048 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4013      	ands	r3, r2
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	429a      	cmp	r2, r3
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	429a      	cmp	r2, r3
 8003044:	d09f      	beq.n	8002f86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3740      	adds	r7, #64	; 0x40
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	4613      	mov	r3, r2
 800305c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	88fa      	ldrh	r2, [r7, #6]
 8003068:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2222      	movs	r2, #34	; 0x22
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800309c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0220 	orr.w	r2, r2, #32
 80030bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b095      	sub	sp, #84	; 0x54
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	330c      	adds	r3, #12
 80030da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	e853 3f00 	ldrex	r3, [r3]
 80030e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	330c      	adds	r3, #12
 80030f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030f4:	643a      	str	r2, [r7, #64]	; 0x40
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030fc:	e841 2300 	strex	r3, r2, [r1]
 8003100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e5      	bne.n	80030d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3314      	adds	r3, #20
 800310e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	e853 3f00 	ldrex	r3, [r3]
 8003116:	61fb      	str	r3, [r7, #28]
   return(result);
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f023 0301 	bic.w	r3, r3, #1
 800311e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3314      	adds	r3, #20
 8003126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800312e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e5      	bne.n	8003108 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	2b01      	cmp	r3, #1
 8003142:	d119      	bne.n	8003178 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	330c      	adds	r3, #12
 800314a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	e853 3f00 	ldrex	r3, [r3]
 8003152:	60bb      	str	r3, [r7, #8]
   return(result);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f023 0310 	bic.w	r3, r3, #16
 800315a:	647b      	str	r3, [r7, #68]	; 0x44
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	330c      	adds	r3, #12
 8003162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003164:	61ba      	str	r2, [r7, #24]
 8003166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003168:	6979      	ldr	r1, [r7, #20]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	e841 2300 	strex	r3, r2, [r1]
 8003170:	613b      	str	r3, [r7, #16]
   return(result);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e5      	bne.n	8003144 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003186:	bf00      	nop
 8003188:	3754      	adds	r7, #84	; 0x54
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff febf 	bl	8002f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b21      	cmp	r3, #33	; 0x21
 80031cc:	d13e      	bne.n	800324c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d6:	d114      	bne.n	8003202 <UART_Transmit_IT+0x48>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d110      	bne.n	8003202 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	1c9a      	adds	r2, r3, #2
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	621a      	str	r2, [r3, #32]
 8003200:	e008      	b.n	8003214 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	1c59      	adds	r1, r3, #1
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6211      	str	r1, [r2, #32]
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29b      	uxth	r3, r3
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4619      	mov	r1, r3
 8003222:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10f      	bne.n	8003248 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003236:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003246:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003270:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff fe4e 	bl	8002f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b08c      	sub	sp, #48	; 0x30
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b22      	cmp	r3, #34	; 0x22
 800329c:	f040 80ab 	bne.w	80033f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a8:	d117      	bne.n	80032da <UART_Receive_IT+0x50>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d113      	bne.n	80032da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	1c9a      	adds	r2, r3, #2
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
 80032d8:	e026      	b.n	8003328 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ec:	d007      	beq.n	80032fe <UART_Receive_IT+0x74>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <UART_Receive_IT+0x82>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	e008      	b.n	800331e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003318:	b2da      	uxtb	r2, r3
 800331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29b      	uxth	r3, r3
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4619      	mov	r1, r3
 8003336:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003338:	2b00      	cmp	r3, #0
 800333a:	d15a      	bne.n	80033f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0220 	bic.w	r2, r2, #32
 800334a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800335a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	2b01      	cmp	r3, #1
 800337a:	d135      	bne.n	80033e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	330c      	adds	r3, #12
 8003388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	613b      	str	r3, [r7, #16]
   return(result);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f023 0310 	bic.w	r3, r3, #16
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	330c      	adds	r3, #12
 80033a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a2:	623a      	str	r2, [r7, #32]
 80033a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	69f9      	ldr	r1, [r7, #28]
 80033a8:	6a3a      	ldr	r2, [r7, #32]
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e5      	bne.n	8003382 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d10a      	bne.n	80033da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff fdaf 	bl	8002f44 <HAL_UARTEx_RxEventCallback>
 80033e6:	e002      	b.n	80033ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7fd fb21 	bl	8000a30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e002      	b.n	80033f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e000      	b.n	80033f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033f6:	2302      	movs	r3, #2
  }
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3730      	adds	r7, #48	; 0x30
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003404:	b0c0      	sub	sp, #256	; 0x100
 8003406:	af00      	add	r7, sp, #0
 8003408:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341c:	68d9      	ldr	r1, [r3, #12]
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	ea40 0301 	orr.w	r3, r0, r1
 8003428:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800342a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	431a      	orrs	r2, r3
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	431a      	orrs	r2, r3
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003458:	f021 010c 	bic.w	r1, r1, #12
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003466:	430b      	orrs	r3, r1
 8003468:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347a:	6999      	ldr	r1, [r3, #24]
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	ea40 0301 	orr.w	r3, r0, r1
 8003486:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b8f      	ldr	r3, [pc, #572]	; (80036cc <UART_SetConfig+0x2cc>)
 8003490:	429a      	cmp	r2, r3
 8003492:	d005      	beq.n	80034a0 <UART_SetConfig+0xa0>
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b8d      	ldr	r3, [pc, #564]	; (80036d0 <UART_SetConfig+0x2d0>)
 800349c:	429a      	cmp	r2, r3
 800349e:	d104      	bne.n	80034aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034a0:	f7fe fa9a 	bl	80019d8 <HAL_RCC_GetPCLK2Freq>
 80034a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034a8:	e003      	b.n	80034b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034aa:	f7fe fa81 	bl	80019b0 <HAL_RCC_GetPCLK1Freq>
 80034ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034bc:	f040 810c 	bne.w	80036d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c4:	2200      	movs	r2, #0
 80034c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034d2:	4622      	mov	r2, r4
 80034d4:	462b      	mov	r3, r5
 80034d6:	1891      	adds	r1, r2, r2
 80034d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80034da:	415b      	adcs	r3, r3
 80034dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034e2:	4621      	mov	r1, r4
 80034e4:	eb12 0801 	adds.w	r8, r2, r1
 80034e8:	4629      	mov	r1, r5
 80034ea:	eb43 0901 	adc.w	r9, r3, r1
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003502:	4690      	mov	r8, r2
 8003504:	4699      	mov	r9, r3
 8003506:	4623      	mov	r3, r4
 8003508:	eb18 0303 	adds.w	r3, r8, r3
 800350c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003510:	462b      	mov	r3, r5
 8003512:	eb49 0303 	adc.w	r3, r9, r3
 8003516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003526:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800352a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800352e:	460b      	mov	r3, r1
 8003530:	18db      	adds	r3, r3, r3
 8003532:	653b      	str	r3, [r7, #80]	; 0x50
 8003534:	4613      	mov	r3, r2
 8003536:	eb42 0303 	adc.w	r3, r2, r3
 800353a:	657b      	str	r3, [r7, #84]	; 0x54
 800353c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003540:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003544:	f7fc feb4 	bl	80002b0 <__aeabi_uldivmod>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4b61      	ldr	r3, [pc, #388]	; (80036d4 <UART_SetConfig+0x2d4>)
 800354e:	fba3 2302 	umull	r2, r3, r3, r2
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	011c      	lsls	r4, r3, #4
 8003556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800355a:	2200      	movs	r2, #0
 800355c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003560:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003564:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003568:	4642      	mov	r2, r8
 800356a:	464b      	mov	r3, r9
 800356c:	1891      	adds	r1, r2, r2
 800356e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003570:	415b      	adcs	r3, r3
 8003572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003574:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003578:	4641      	mov	r1, r8
 800357a:	eb12 0a01 	adds.w	sl, r2, r1
 800357e:	4649      	mov	r1, r9
 8003580:	eb43 0b01 	adc.w	fp, r3, r1
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003590:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003594:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003598:	4692      	mov	sl, r2
 800359a:	469b      	mov	fp, r3
 800359c:	4643      	mov	r3, r8
 800359e:	eb1a 0303 	adds.w	r3, sl, r3
 80035a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035a6:	464b      	mov	r3, r9
 80035a8:	eb4b 0303 	adc.w	r3, fp, r3
 80035ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035c4:	460b      	mov	r3, r1
 80035c6:	18db      	adds	r3, r3, r3
 80035c8:	643b      	str	r3, [r7, #64]	; 0x40
 80035ca:	4613      	mov	r3, r2
 80035cc:	eb42 0303 	adc.w	r3, r2, r3
 80035d0:	647b      	str	r3, [r7, #68]	; 0x44
 80035d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035da:	f7fc fe69 	bl	80002b0 <__aeabi_uldivmod>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4611      	mov	r1, r2
 80035e4:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <UART_SetConfig+0x2d4>)
 80035e6:	fba3 2301 	umull	r2, r3, r3, r1
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2264      	movs	r2, #100	; 0x64
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	1acb      	subs	r3, r1, r3
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035fa:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <UART_SetConfig+0x2d4>)
 80035fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003608:	441c      	add	r4, r3
 800360a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800360e:	2200      	movs	r2, #0
 8003610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003614:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003618:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800361c:	4642      	mov	r2, r8
 800361e:	464b      	mov	r3, r9
 8003620:	1891      	adds	r1, r2, r2
 8003622:	63b9      	str	r1, [r7, #56]	; 0x38
 8003624:	415b      	adcs	r3, r3
 8003626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003628:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800362c:	4641      	mov	r1, r8
 800362e:	1851      	adds	r1, r2, r1
 8003630:	6339      	str	r1, [r7, #48]	; 0x30
 8003632:	4649      	mov	r1, r9
 8003634:	414b      	adcs	r3, r1
 8003636:	637b      	str	r3, [r7, #52]	; 0x34
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003644:	4659      	mov	r1, fp
 8003646:	00cb      	lsls	r3, r1, #3
 8003648:	4651      	mov	r1, sl
 800364a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800364e:	4651      	mov	r1, sl
 8003650:	00ca      	lsls	r2, r1, #3
 8003652:	4610      	mov	r0, r2
 8003654:	4619      	mov	r1, r3
 8003656:	4603      	mov	r3, r0
 8003658:	4642      	mov	r2, r8
 800365a:	189b      	adds	r3, r3, r2
 800365c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003660:	464b      	mov	r3, r9
 8003662:	460a      	mov	r2, r1
 8003664:	eb42 0303 	adc.w	r3, r2, r3
 8003668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003678:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800367c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003680:	460b      	mov	r3, r1
 8003682:	18db      	adds	r3, r3, r3
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
 8003686:	4613      	mov	r3, r2
 8003688:	eb42 0303 	adc.w	r3, r2, r3
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800368e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003692:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003696:	f7fc fe0b 	bl	80002b0 <__aeabi_uldivmod>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <UART_SetConfig+0x2d4>)
 80036a0:	fba3 1302 	umull	r1, r3, r3, r2
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	2164      	movs	r1, #100	; 0x64
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	3332      	adds	r3, #50	; 0x32
 80036b2:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <UART_SetConfig+0x2d4>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	f003 0207 	and.w	r2, r3, #7
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4422      	add	r2, r4
 80036c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036c8:	e105      	b.n	80038d6 <UART_SetConfig+0x4d6>
 80036ca:	bf00      	nop
 80036cc:	40011000 	.word	0x40011000
 80036d0:	40011400 	.word	0x40011400
 80036d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036dc:	2200      	movs	r2, #0
 80036de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036ea:	4642      	mov	r2, r8
 80036ec:	464b      	mov	r3, r9
 80036ee:	1891      	adds	r1, r2, r2
 80036f0:	6239      	str	r1, [r7, #32]
 80036f2:	415b      	adcs	r3, r3
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036fa:	4641      	mov	r1, r8
 80036fc:	1854      	adds	r4, r2, r1
 80036fe:	4649      	mov	r1, r9
 8003700:	eb43 0501 	adc.w	r5, r3, r1
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	00eb      	lsls	r3, r5, #3
 800370e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003712:	00e2      	lsls	r2, r4, #3
 8003714:	4614      	mov	r4, r2
 8003716:	461d      	mov	r5, r3
 8003718:	4643      	mov	r3, r8
 800371a:	18e3      	adds	r3, r4, r3
 800371c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003720:	464b      	mov	r3, r9
 8003722:	eb45 0303 	adc.w	r3, r5, r3
 8003726:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003736:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003746:	4629      	mov	r1, r5
 8003748:	008b      	lsls	r3, r1, #2
 800374a:	4621      	mov	r1, r4
 800374c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003750:	4621      	mov	r1, r4
 8003752:	008a      	lsls	r2, r1, #2
 8003754:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003758:	f7fc fdaa 	bl	80002b0 <__aeabi_uldivmod>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4b60      	ldr	r3, [pc, #384]	; (80038e4 <UART_SetConfig+0x4e4>)
 8003762:	fba3 2302 	umull	r2, r3, r3, r2
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	011c      	lsls	r4, r3, #4
 800376a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800376e:	2200      	movs	r2, #0
 8003770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003774:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003778:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800377c:	4642      	mov	r2, r8
 800377e:	464b      	mov	r3, r9
 8003780:	1891      	adds	r1, r2, r2
 8003782:	61b9      	str	r1, [r7, #24]
 8003784:	415b      	adcs	r3, r3
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800378c:	4641      	mov	r1, r8
 800378e:	1851      	adds	r1, r2, r1
 8003790:	6139      	str	r1, [r7, #16]
 8003792:	4649      	mov	r1, r9
 8003794:	414b      	adcs	r3, r1
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037a4:	4659      	mov	r1, fp
 80037a6:	00cb      	lsls	r3, r1, #3
 80037a8:	4651      	mov	r1, sl
 80037aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ae:	4651      	mov	r1, sl
 80037b0:	00ca      	lsls	r2, r1, #3
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	4642      	mov	r2, r8
 80037ba:	189b      	adds	r3, r3, r2
 80037bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037c0:	464b      	mov	r3, r9
 80037c2:	460a      	mov	r2, r1
 80037c4:	eb42 0303 	adc.w	r3, r2, r3
 80037c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80037d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037e4:	4649      	mov	r1, r9
 80037e6:	008b      	lsls	r3, r1, #2
 80037e8:	4641      	mov	r1, r8
 80037ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ee:	4641      	mov	r1, r8
 80037f0:	008a      	lsls	r2, r1, #2
 80037f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037f6:	f7fc fd5b 	bl	80002b0 <__aeabi_uldivmod>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <UART_SetConfig+0x4e4>)
 8003800:	fba3 1302 	umull	r1, r3, r3, r2
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	2164      	movs	r1, #100	; 0x64
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	3332      	adds	r3, #50	; 0x32
 8003812:	4a34      	ldr	r2, [pc, #208]	; (80038e4 <UART_SetConfig+0x4e4>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800381e:	441c      	add	r4, r3
 8003820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003824:	2200      	movs	r2, #0
 8003826:	673b      	str	r3, [r7, #112]	; 0x70
 8003828:	677a      	str	r2, [r7, #116]	; 0x74
 800382a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800382e:	4642      	mov	r2, r8
 8003830:	464b      	mov	r3, r9
 8003832:	1891      	adds	r1, r2, r2
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	415b      	adcs	r3, r3
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800383e:	4641      	mov	r1, r8
 8003840:	1851      	adds	r1, r2, r1
 8003842:	6039      	str	r1, [r7, #0]
 8003844:	4649      	mov	r1, r9
 8003846:	414b      	adcs	r3, r1
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003856:	4659      	mov	r1, fp
 8003858:	00cb      	lsls	r3, r1, #3
 800385a:	4651      	mov	r1, sl
 800385c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003860:	4651      	mov	r1, sl
 8003862:	00ca      	lsls	r2, r1, #3
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	4603      	mov	r3, r0
 800386a:	4642      	mov	r2, r8
 800386c:	189b      	adds	r3, r3, r2
 800386e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003870:	464b      	mov	r3, r9
 8003872:	460a      	mov	r2, r1
 8003874:	eb42 0303 	adc.w	r3, r2, r3
 8003878:	66fb      	str	r3, [r7, #108]	; 0x6c
 800387a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	663b      	str	r3, [r7, #96]	; 0x60
 8003884:	667a      	str	r2, [r7, #100]	; 0x64
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003892:	4649      	mov	r1, r9
 8003894:	008b      	lsls	r3, r1, #2
 8003896:	4641      	mov	r1, r8
 8003898:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800389c:	4641      	mov	r1, r8
 800389e:	008a      	lsls	r2, r1, #2
 80038a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038a4:	f7fc fd04 	bl	80002b0 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <UART_SetConfig+0x4e4>)
 80038ae:	fba3 1302 	umull	r1, r3, r3, r2
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	2164      	movs	r1, #100	; 0x64
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	3332      	adds	r3, #50	; 0x32
 80038c0:	4a08      	ldr	r2, [pc, #32]	; (80038e4 <UART_SetConfig+0x4e4>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	f003 020f 	and.w	r2, r3, #15
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4422      	add	r2, r4
 80038d4:	609a      	str	r2, [r3, #8]
}
 80038d6:	bf00      	nop
 80038d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038dc:	46bd      	mov	sp, r7
 80038de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038e2:	bf00      	nop
 80038e4:	51eb851f 	.word	0x51eb851f

080038e8 <__errno>:
 80038e8:	4b01      	ldr	r3, [pc, #4]	; (80038f0 <__errno+0x8>)
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	2000000c 	.word	0x2000000c

080038f4 <__libc_init_array>:
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	4d0d      	ldr	r5, [pc, #52]	; (800392c <__libc_init_array+0x38>)
 80038f8:	4c0d      	ldr	r4, [pc, #52]	; (8003930 <__libc_init_array+0x3c>)
 80038fa:	1b64      	subs	r4, r4, r5
 80038fc:	10a4      	asrs	r4, r4, #2
 80038fe:	2600      	movs	r6, #0
 8003900:	42a6      	cmp	r6, r4
 8003902:	d109      	bne.n	8003918 <__libc_init_array+0x24>
 8003904:	4d0b      	ldr	r5, [pc, #44]	; (8003934 <__libc_init_array+0x40>)
 8003906:	4c0c      	ldr	r4, [pc, #48]	; (8003938 <__libc_init_array+0x44>)
 8003908:	f000 fca2 	bl	8004250 <_init>
 800390c:	1b64      	subs	r4, r4, r5
 800390e:	10a4      	asrs	r4, r4, #2
 8003910:	2600      	movs	r6, #0
 8003912:	42a6      	cmp	r6, r4
 8003914:	d105      	bne.n	8003922 <__libc_init_array+0x2e>
 8003916:	bd70      	pop	{r4, r5, r6, pc}
 8003918:	f855 3b04 	ldr.w	r3, [r5], #4
 800391c:	4798      	blx	r3
 800391e:	3601      	adds	r6, #1
 8003920:	e7ee      	b.n	8003900 <__libc_init_array+0xc>
 8003922:	f855 3b04 	ldr.w	r3, [r5], #4
 8003926:	4798      	blx	r3
 8003928:	3601      	adds	r6, #1
 800392a:	e7f2      	b.n	8003912 <__libc_init_array+0x1e>
 800392c:	0800435c 	.word	0x0800435c
 8003930:	0800435c 	.word	0x0800435c
 8003934:	0800435c 	.word	0x0800435c
 8003938:	08004360 	.word	0x08004360

0800393c <memset>:
 800393c:	4402      	add	r2, r0
 800393e:	4603      	mov	r3, r0
 8003940:	4293      	cmp	r3, r2
 8003942:	d100      	bne.n	8003946 <memset+0xa>
 8003944:	4770      	bx	lr
 8003946:	f803 1b01 	strb.w	r1, [r3], #1
 800394a:	e7f9      	b.n	8003940 <memset+0x4>

0800394c <sniprintf>:
 800394c:	b40c      	push	{r2, r3}
 800394e:	b530      	push	{r4, r5, lr}
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <sniprintf+0x64>)
 8003952:	1e0c      	subs	r4, r1, #0
 8003954:	681d      	ldr	r5, [r3, #0]
 8003956:	b09d      	sub	sp, #116	; 0x74
 8003958:	da08      	bge.n	800396c <sniprintf+0x20>
 800395a:	238b      	movs	r3, #139	; 0x8b
 800395c:	602b      	str	r3, [r5, #0]
 800395e:	f04f 30ff 	mov.w	r0, #4294967295
 8003962:	b01d      	add	sp, #116	; 0x74
 8003964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003968:	b002      	add	sp, #8
 800396a:	4770      	bx	lr
 800396c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003970:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003974:	bf14      	ite	ne
 8003976:	f104 33ff 	addne.w	r3, r4, #4294967295
 800397a:	4623      	moveq	r3, r4
 800397c:	9304      	str	r3, [sp, #16]
 800397e:	9307      	str	r3, [sp, #28]
 8003980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003984:	9002      	str	r0, [sp, #8]
 8003986:	9006      	str	r0, [sp, #24]
 8003988:	f8ad 3016 	strh.w	r3, [sp, #22]
 800398c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800398e:	ab21      	add	r3, sp, #132	; 0x84
 8003990:	a902      	add	r1, sp, #8
 8003992:	4628      	mov	r0, r5
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	f000 f869 	bl	8003a6c <_svfiprintf_r>
 800399a:	1c43      	adds	r3, r0, #1
 800399c:	bfbc      	itt	lt
 800399e:	238b      	movlt	r3, #139	; 0x8b
 80039a0:	602b      	strlt	r3, [r5, #0]
 80039a2:	2c00      	cmp	r4, #0
 80039a4:	d0dd      	beq.n	8003962 <sniprintf+0x16>
 80039a6:	9b02      	ldr	r3, [sp, #8]
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	e7d9      	b.n	8003962 <sniprintf+0x16>
 80039ae:	bf00      	nop
 80039b0:	2000000c 	.word	0x2000000c

080039b4 <__ssputs_r>:
 80039b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b8:	688e      	ldr	r6, [r1, #8]
 80039ba:	429e      	cmp	r6, r3
 80039bc:	4682      	mov	sl, r0
 80039be:	460c      	mov	r4, r1
 80039c0:	4690      	mov	r8, r2
 80039c2:	461f      	mov	r7, r3
 80039c4:	d838      	bhi.n	8003a38 <__ssputs_r+0x84>
 80039c6:	898a      	ldrh	r2, [r1, #12]
 80039c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039cc:	d032      	beq.n	8003a34 <__ssputs_r+0x80>
 80039ce:	6825      	ldr	r5, [r4, #0]
 80039d0:	6909      	ldr	r1, [r1, #16]
 80039d2:	eba5 0901 	sub.w	r9, r5, r1
 80039d6:	6965      	ldr	r5, [r4, #20]
 80039d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039e0:	3301      	adds	r3, #1
 80039e2:	444b      	add	r3, r9
 80039e4:	106d      	asrs	r5, r5, #1
 80039e6:	429d      	cmp	r5, r3
 80039e8:	bf38      	it	cc
 80039ea:	461d      	movcc	r5, r3
 80039ec:	0553      	lsls	r3, r2, #21
 80039ee:	d531      	bpl.n	8003a54 <__ssputs_r+0xa0>
 80039f0:	4629      	mov	r1, r5
 80039f2:	f000 fb63 	bl	80040bc <_malloc_r>
 80039f6:	4606      	mov	r6, r0
 80039f8:	b950      	cbnz	r0, 8003a10 <__ssputs_r+0x5c>
 80039fa:	230c      	movs	r3, #12
 80039fc:	f8ca 3000 	str.w	r3, [sl]
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a06:	81a3      	strh	r3, [r4, #12]
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a10:	6921      	ldr	r1, [r4, #16]
 8003a12:	464a      	mov	r2, r9
 8003a14:	f000 fabe 	bl	8003f94 <memcpy>
 8003a18:	89a3      	ldrh	r3, [r4, #12]
 8003a1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a22:	81a3      	strh	r3, [r4, #12]
 8003a24:	6126      	str	r6, [r4, #16]
 8003a26:	6165      	str	r5, [r4, #20]
 8003a28:	444e      	add	r6, r9
 8003a2a:	eba5 0509 	sub.w	r5, r5, r9
 8003a2e:	6026      	str	r6, [r4, #0]
 8003a30:	60a5      	str	r5, [r4, #8]
 8003a32:	463e      	mov	r6, r7
 8003a34:	42be      	cmp	r6, r7
 8003a36:	d900      	bls.n	8003a3a <__ssputs_r+0x86>
 8003a38:	463e      	mov	r6, r7
 8003a3a:	6820      	ldr	r0, [r4, #0]
 8003a3c:	4632      	mov	r2, r6
 8003a3e:	4641      	mov	r1, r8
 8003a40:	f000 fab6 	bl	8003fb0 <memmove>
 8003a44:	68a3      	ldr	r3, [r4, #8]
 8003a46:	1b9b      	subs	r3, r3, r6
 8003a48:	60a3      	str	r3, [r4, #8]
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	4433      	add	r3, r6
 8003a4e:	6023      	str	r3, [r4, #0]
 8003a50:	2000      	movs	r0, #0
 8003a52:	e7db      	b.n	8003a0c <__ssputs_r+0x58>
 8003a54:	462a      	mov	r2, r5
 8003a56:	f000 fba5 	bl	80041a4 <_realloc_r>
 8003a5a:	4606      	mov	r6, r0
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	d1e1      	bne.n	8003a24 <__ssputs_r+0x70>
 8003a60:	6921      	ldr	r1, [r4, #16]
 8003a62:	4650      	mov	r0, sl
 8003a64:	f000 fabe 	bl	8003fe4 <_free_r>
 8003a68:	e7c7      	b.n	80039fa <__ssputs_r+0x46>
	...

08003a6c <_svfiprintf_r>:
 8003a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a70:	4698      	mov	r8, r3
 8003a72:	898b      	ldrh	r3, [r1, #12]
 8003a74:	061b      	lsls	r3, r3, #24
 8003a76:	b09d      	sub	sp, #116	; 0x74
 8003a78:	4607      	mov	r7, r0
 8003a7a:	460d      	mov	r5, r1
 8003a7c:	4614      	mov	r4, r2
 8003a7e:	d50e      	bpl.n	8003a9e <_svfiprintf_r+0x32>
 8003a80:	690b      	ldr	r3, [r1, #16]
 8003a82:	b963      	cbnz	r3, 8003a9e <_svfiprintf_r+0x32>
 8003a84:	2140      	movs	r1, #64	; 0x40
 8003a86:	f000 fb19 	bl	80040bc <_malloc_r>
 8003a8a:	6028      	str	r0, [r5, #0]
 8003a8c:	6128      	str	r0, [r5, #16]
 8003a8e:	b920      	cbnz	r0, 8003a9a <_svfiprintf_r+0x2e>
 8003a90:	230c      	movs	r3, #12
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	f04f 30ff 	mov.w	r0, #4294967295
 8003a98:	e0d1      	b.n	8003c3e <_svfiprintf_r+0x1d2>
 8003a9a:	2340      	movs	r3, #64	; 0x40
 8003a9c:	616b      	str	r3, [r5, #20]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa2:	2320      	movs	r3, #32
 8003aa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003aa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aac:	2330      	movs	r3, #48	; 0x30
 8003aae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c58 <_svfiprintf_r+0x1ec>
 8003ab2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ab6:	f04f 0901 	mov.w	r9, #1
 8003aba:	4623      	mov	r3, r4
 8003abc:	469a      	mov	sl, r3
 8003abe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ac2:	b10a      	cbz	r2, 8003ac8 <_svfiprintf_r+0x5c>
 8003ac4:	2a25      	cmp	r2, #37	; 0x25
 8003ac6:	d1f9      	bne.n	8003abc <_svfiprintf_r+0x50>
 8003ac8:	ebba 0b04 	subs.w	fp, sl, r4
 8003acc:	d00b      	beq.n	8003ae6 <_svfiprintf_r+0x7a>
 8003ace:	465b      	mov	r3, fp
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	4638      	mov	r0, r7
 8003ad6:	f7ff ff6d 	bl	80039b4 <__ssputs_r>
 8003ada:	3001      	adds	r0, #1
 8003adc:	f000 80aa 	beq.w	8003c34 <_svfiprintf_r+0x1c8>
 8003ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ae2:	445a      	add	r2, fp
 8003ae4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80a2 	beq.w	8003c34 <_svfiprintf_r+0x1c8>
 8003af0:	2300      	movs	r3, #0
 8003af2:	f04f 32ff 	mov.w	r2, #4294967295
 8003af6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003afa:	f10a 0a01 	add.w	sl, sl, #1
 8003afe:	9304      	str	r3, [sp, #16]
 8003b00:	9307      	str	r3, [sp, #28]
 8003b02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b06:	931a      	str	r3, [sp, #104]	; 0x68
 8003b08:	4654      	mov	r4, sl
 8003b0a:	2205      	movs	r2, #5
 8003b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b10:	4851      	ldr	r0, [pc, #324]	; (8003c58 <_svfiprintf_r+0x1ec>)
 8003b12:	f7fc fb7d 	bl	8000210 <memchr>
 8003b16:	9a04      	ldr	r2, [sp, #16]
 8003b18:	b9d8      	cbnz	r0, 8003b52 <_svfiprintf_r+0xe6>
 8003b1a:	06d0      	lsls	r0, r2, #27
 8003b1c:	bf44      	itt	mi
 8003b1e:	2320      	movmi	r3, #32
 8003b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b24:	0711      	lsls	r1, r2, #28
 8003b26:	bf44      	itt	mi
 8003b28:	232b      	movmi	r3, #43	; 0x2b
 8003b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b32:	2b2a      	cmp	r3, #42	; 0x2a
 8003b34:	d015      	beq.n	8003b62 <_svfiprintf_r+0xf6>
 8003b36:	9a07      	ldr	r2, [sp, #28]
 8003b38:	4654      	mov	r4, sl
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f04f 0c0a 	mov.w	ip, #10
 8003b40:	4621      	mov	r1, r4
 8003b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b46:	3b30      	subs	r3, #48	; 0x30
 8003b48:	2b09      	cmp	r3, #9
 8003b4a:	d94e      	bls.n	8003bea <_svfiprintf_r+0x17e>
 8003b4c:	b1b0      	cbz	r0, 8003b7c <_svfiprintf_r+0x110>
 8003b4e:	9207      	str	r2, [sp, #28]
 8003b50:	e014      	b.n	8003b7c <_svfiprintf_r+0x110>
 8003b52:	eba0 0308 	sub.w	r3, r0, r8
 8003b56:	fa09 f303 	lsl.w	r3, r9, r3
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	9304      	str	r3, [sp, #16]
 8003b5e:	46a2      	mov	sl, r4
 8003b60:	e7d2      	b.n	8003b08 <_svfiprintf_r+0x9c>
 8003b62:	9b03      	ldr	r3, [sp, #12]
 8003b64:	1d19      	adds	r1, r3, #4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	9103      	str	r1, [sp, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bfbb      	ittet	lt
 8003b6e:	425b      	neglt	r3, r3
 8003b70:	f042 0202 	orrlt.w	r2, r2, #2
 8003b74:	9307      	strge	r3, [sp, #28]
 8003b76:	9307      	strlt	r3, [sp, #28]
 8003b78:	bfb8      	it	lt
 8003b7a:	9204      	strlt	r2, [sp, #16]
 8003b7c:	7823      	ldrb	r3, [r4, #0]
 8003b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8003b80:	d10c      	bne.n	8003b9c <_svfiprintf_r+0x130>
 8003b82:	7863      	ldrb	r3, [r4, #1]
 8003b84:	2b2a      	cmp	r3, #42	; 0x2a
 8003b86:	d135      	bne.n	8003bf4 <_svfiprintf_r+0x188>
 8003b88:	9b03      	ldr	r3, [sp, #12]
 8003b8a:	1d1a      	adds	r2, r3, #4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	9203      	str	r2, [sp, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bfb8      	it	lt
 8003b94:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b98:	3402      	adds	r4, #2
 8003b9a:	9305      	str	r3, [sp, #20]
 8003b9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c68 <_svfiprintf_r+0x1fc>
 8003ba0:	7821      	ldrb	r1, [r4, #0]
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	4650      	mov	r0, sl
 8003ba6:	f7fc fb33 	bl	8000210 <memchr>
 8003baa:	b140      	cbz	r0, 8003bbe <_svfiprintf_r+0x152>
 8003bac:	2340      	movs	r3, #64	; 0x40
 8003bae:	eba0 000a 	sub.w	r0, r0, sl
 8003bb2:	fa03 f000 	lsl.w	r0, r3, r0
 8003bb6:	9b04      	ldr	r3, [sp, #16]
 8003bb8:	4303      	orrs	r3, r0
 8003bba:	3401      	adds	r4, #1
 8003bbc:	9304      	str	r3, [sp, #16]
 8003bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc2:	4826      	ldr	r0, [pc, #152]	; (8003c5c <_svfiprintf_r+0x1f0>)
 8003bc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bc8:	2206      	movs	r2, #6
 8003bca:	f7fc fb21 	bl	8000210 <memchr>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d038      	beq.n	8003c44 <_svfiprintf_r+0x1d8>
 8003bd2:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <_svfiprintf_r+0x1f4>)
 8003bd4:	bb1b      	cbnz	r3, 8003c1e <_svfiprintf_r+0x1b2>
 8003bd6:	9b03      	ldr	r3, [sp, #12]
 8003bd8:	3307      	adds	r3, #7
 8003bda:	f023 0307 	bic.w	r3, r3, #7
 8003bde:	3308      	adds	r3, #8
 8003be0:	9303      	str	r3, [sp, #12]
 8003be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003be4:	4433      	add	r3, r6
 8003be6:	9309      	str	r3, [sp, #36]	; 0x24
 8003be8:	e767      	b.n	8003aba <_svfiprintf_r+0x4e>
 8003bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bee:	460c      	mov	r4, r1
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	e7a5      	b.n	8003b40 <_svfiprintf_r+0xd4>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	3401      	adds	r4, #1
 8003bf8:	9305      	str	r3, [sp, #20]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f04f 0c0a 	mov.w	ip, #10
 8003c00:	4620      	mov	r0, r4
 8003c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c06:	3a30      	subs	r2, #48	; 0x30
 8003c08:	2a09      	cmp	r2, #9
 8003c0a:	d903      	bls.n	8003c14 <_svfiprintf_r+0x1a8>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0c5      	beq.n	8003b9c <_svfiprintf_r+0x130>
 8003c10:	9105      	str	r1, [sp, #20]
 8003c12:	e7c3      	b.n	8003b9c <_svfiprintf_r+0x130>
 8003c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c18:	4604      	mov	r4, r0
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e7f0      	b.n	8003c00 <_svfiprintf_r+0x194>
 8003c1e:	ab03      	add	r3, sp, #12
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	462a      	mov	r2, r5
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <_svfiprintf_r+0x1f8>)
 8003c26:	a904      	add	r1, sp, #16
 8003c28:	4638      	mov	r0, r7
 8003c2a:	f3af 8000 	nop.w
 8003c2e:	1c42      	adds	r2, r0, #1
 8003c30:	4606      	mov	r6, r0
 8003c32:	d1d6      	bne.n	8003be2 <_svfiprintf_r+0x176>
 8003c34:	89ab      	ldrh	r3, [r5, #12]
 8003c36:	065b      	lsls	r3, r3, #25
 8003c38:	f53f af2c 	bmi.w	8003a94 <_svfiprintf_r+0x28>
 8003c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c3e:	b01d      	add	sp, #116	; 0x74
 8003c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c44:	ab03      	add	r3, sp, #12
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	462a      	mov	r2, r5
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <_svfiprintf_r+0x1f8>)
 8003c4c:	a904      	add	r1, sp, #16
 8003c4e:	4638      	mov	r0, r7
 8003c50:	f000 f87a 	bl	8003d48 <_printf_i>
 8003c54:	e7eb      	b.n	8003c2e <_svfiprintf_r+0x1c2>
 8003c56:	bf00      	nop
 8003c58:	08004320 	.word	0x08004320
 8003c5c:	0800432a 	.word	0x0800432a
 8003c60:	00000000 	.word	0x00000000
 8003c64:	080039b5 	.word	0x080039b5
 8003c68:	08004326 	.word	0x08004326

08003c6c <_printf_common>:
 8003c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c70:	4616      	mov	r6, r2
 8003c72:	4699      	mov	r9, r3
 8003c74:	688a      	ldr	r2, [r1, #8]
 8003c76:	690b      	ldr	r3, [r1, #16]
 8003c78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	bfb8      	it	lt
 8003c80:	4613      	movlt	r3, r2
 8003c82:	6033      	str	r3, [r6, #0]
 8003c84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c88:	4607      	mov	r7, r0
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	b10a      	cbz	r2, 8003c92 <_printf_common+0x26>
 8003c8e:	3301      	adds	r3, #1
 8003c90:	6033      	str	r3, [r6, #0]
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	0699      	lsls	r1, r3, #26
 8003c96:	bf42      	ittt	mi
 8003c98:	6833      	ldrmi	r3, [r6, #0]
 8003c9a:	3302      	addmi	r3, #2
 8003c9c:	6033      	strmi	r3, [r6, #0]
 8003c9e:	6825      	ldr	r5, [r4, #0]
 8003ca0:	f015 0506 	ands.w	r5, r5, #6
 8003ca4:	d106      	bne.n	8003cb4 <_printf_common+0x48>
 8003ca6:	f104 0a19 	add.w	sl, r4, #25
 8003caa:	68e3      	ldr	r3, [r4, #12]
 8003cac:	6832      	ldr	r2, [r6, #0]
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	42ab      	cmp	r3, r5
 8003cb2:	dc26      	bgt.n	8003d02 <_printf_common+0x96>
 8003cb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cb8:	1e13      	subs	r3, r2, #0
 8003cba:	6822      	ldr	r2, [r4, #0]
 8003cbc:	bf18      	it	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	0692      	lsls	r2, r2, #26
 8003cc2:	d42b      	bmi.n	8003d1c <_printf_common+0xb0>
 8003cc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cc8:	4649      	mov	r1, r9
 8003cca:	4638      	mov	r0, r7
 8003ccc:	47c0      	blx	r8
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d01e      	beq.n	8003d10 <_printf_common+0xa4>
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	68e5      	ldr	r5, [r4, #12]
 8003cd6:	6832      	ldr	r2, [r6, #0]
 8003cd8:	f003 0306 	and.w	r3, r3, #6
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	bf08      	it	eq
 8003ce0:	1aad      	subeq	r5, r5, r2
 8003ce2:	68a3      	ldr	r3, [r4, #8]
 8003ce4:	6922      	ldr	r2, [r4, #16]
 8003ce6:	bf0c      	ite	eq
 8003ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cec:	2500      	movne	r5, #0
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	bfc4      	itt	gt
 8003cf2:	1a9b      	subgt	r3, r3, r2
 8003cf4:	18ed      	addgt	r5, r5, r3
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	341a      	adds	r4, #26
 8003cfa:	42b5      	cmp	r5, r6
 8003cfc:	d11a      	bne.n	8003d34 <_printf_common+0xc8>
 8003cfe:	2000      	movs	r0, #0
 8003d00:	e008      	b.n	8003d14 <_printf_common+0xa8>
 8003d02:	2301      	movs	r3, #1
 8003d04:	4652      	mov	r2, sl
 8003d06:	4649      	mov	r1, r9
 8003d08:	4638      	mov	r0, r7
 8003d0a:	47c0      	blx	r8
 8003d0c:	3001      	adds	r0, #1
 8003d0e:	d103      	bne.n	8003d18 <_printf_common+0xac>
 8003d10:	f04f 30ff 	mov.w	r0, #4294967295
 8003d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d18:	3501      	adds	r5, #1
 8003d1a:	e7c6      	b.n	8003caa <_printf_common+0x3e>
 8003d1c:	18e1      	adds	r1, r4, r3
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	2030      	movs	r0, #48	; 0x30
 8003d22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d26:	4422      	add	r2, r4
 8003d28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d30:	3302      	adds	r3, #2
 8003d32:	e7c7      	b.n	8003cc4 <_printf_common+0x58>
 8003d34:	2301      	movs	r3, #1
 8003d36:	4622      	mov	r2, r4
 8003d38:	4649      	mov	r1, r9
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	47c0      	blx	r8
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d0e6      	beq.n	8003d10 <_printf_common+0xa4>
 8003d42:	3601      	adds	r6, #1
 8003d44:	e7d9      	b.n	8003cfa <_printf_common+0x8e>
	...

08003d48 <_printf_i>:
 8003d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d4c:	7e0f      	ldrb	r7, [r1, #24]
 8003d4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d50:	2f78      	cmp	r7, #120	; 0x78
 8003d52:	4691      	mov	r9, r2
 8003d54:	4680      	mov	r8, r0
 8003d56:	460c      	mov	r4, r1
 8003d58:	469a      	mov	sl, r3
 8003d5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d5e:	d807      	bhi.n	8003d70 <_printf_i+0x28>
 8003d60:	2f62      	cmp	r7, #98	; 0x62
 8003d62:	d80a      	bhi.n	8003d7a <_printf_i+0x32>
 8003d64:	2f00      	cmp	r7, #0
 8003d66:	f000 80d8 	beq.w	8003f1a <_printf_i+0x1d2>
 8003d6a:	2f58      	cmp	r7, #88	; 0x58
 8003d6c:	f000 80a3 	beq.w	8003eb6 <_printf_i+0x16e>
 8003d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d78:	e03a      	b.n	8003df0 <_printf_i+0xa8>
 8003d7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d7e:	2b15      	cmp	r3, #21
 8003d80:	d8f6      	bhi.n	8003d70 <_printf_i+0x28>
 8003d82:	a101      	add	r1, pc, #4	; (adr r1, 8003d88 <_printf_i+0x40>)
 8003d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d88:	08003de1 	.word	0x08003de1
 8003d8c:	08003df5 	.word	0x08003df5
 8003d90:	08003d71 	.word	0x08003d71
 8003d94:	08003d71 	.word	0x08003d71
 8003d98:	08003d71 	.word	0x08003d71
 8003d9c:	08003d71 	.word	0x08003d71
 8003da0:	08003df5 	.word	0x08003df5
 8003da4:	08003d71 	.word	0x08003d71
 8003da8:	08003d71 	.word	0x08003d71
 8003dac:	08003d71 	.word	0x08003d71
 8003db0:	08003d71 	.word	0x08003d71
 8003db4:	08003f01 	.word	0x08003f01
 8003db8:	08003e25 	.word	0x08003e25
 8003dbc:	08003ee3 	.word	0x08003ee3
 8003dc0:	08003d71 	.word	0x08003d71
 8003dc4:	08003d71 	.word	0x08003d71
 8003dc8:	08003f23 	.word	0x08003f23
 8003dcc:	08003d71 	.word	0x08003d71
 8003dd0:	08003e25 	.word	0x08003e25
 8003dd4:	08003d71 	.word	0x08003d71
 8003dd8:	08003d71 	.word	0x08003d71
 8003ddc:	08003eeb 	.word	0x08003eeb
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	1d1a      	adds	r2, r3, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	602a      	str	r2, [r5, #0]
 8003de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0a3      	b.n	8003f3c <_printf_i+0x1f4>
 8003df4:	6820      	ldr	r0, [r4, #0]
 8003df6:	6829      	ldr	r1, [r5, #0]
 8003df8:	0606      	lsls	r6, r0, #24
 8003dfa:	f101 0304 	add.w	r3, r1, #4
 8003dfe:	d50a      	bpl.n	8003e16 <_printf_i+0xce>
 8003e00:	680e      	ldr	r6, [r1, #0]
 8003e02:	602b      	str	r3, [r5, #0]
 8003e04:	2e00      	cmp	r6, #0
 8003e06:	da03      	bge.n	8003e10 <_printf_i+0xc8>
 8003e08:	232d      	movs	r3, #45	; 0x2d
 8003e0a:	4276      	negs	r6, r6
 8003e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e10:	485e      	ldr	r0, [pc, #376]	; (8003f8c <_printf_i+0x244>)
 8003e12:	230a      	movs	r3, #10
 8003e14:	e019      	b.n	8003e4a <_printf_i+0x102>
 8003e16:	680e      	ldr	r6, [r1, #0]
 8003e18:	602b      	str	r3, [r5, #0]
 8003e1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e1e:	bf18      	it	ne
 8003e20:	b236      	sxthne	r6, r6
 8003e22:	e7ef      	b.n	8003e04 <_printf_i+0xbc>
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	6820      	ldr	r0, [r4, #0]
 8003e28:	1d19      	adds	r1, r3, #4
 8003e2a:	6029      	str	r1, [r5, #0]
 8003e2c:	0601      	lsls	r1, r0, #24
 8003e2e:	d501      	bpl.n	8003e34 <_printf_i+0xec>
 8003e30:	681e      	ldr	r6, [r3, #0]
 8003e32:	e002      	b.n	8003e3a <_printf_i+0xf2>
 8003e34:	0646      	lsls	r6, r0, #25
 8003e36:	d5fb      	bpl.n	8003e30 <_printf_i+0xe8>
 8003e38:	881e      	ldrh	r6, [r3, #0]
 8003e3a:	4854      	ldr	r0, [pc, #336]	; (8003f8c <_printf_i+0x244>)
 8003e3c:	2f6f      	cmp	r7, #111	; 0x6f
 8003e3e:	bf0c      	ite	eq
 8003e40:	2308      	moveq	r3, #8
 8003e42:	230a      	movne	r3, #10
 8003e44:	2100      	movs	r1, #0
 8003e46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e4a:	6865      	ldr	r5, [r4, #4]
 8003e4c:	60a5      	str	r5, [r4, #8]
 8003e4e:	2d00      	cmp	r5, #0
 8003e50:	bfa2      	ittt	ge
 8003e52:	6821      	ldrge	r1, [r4, #0]
 8003e54:	f021 0104 	bicge.w	r1, r1, #4
 8003e58:	6021      	strge	r1, [r4, #0]
 8003e5a:	b90e      	cbnz	r6, 8003e60 <_printf_i+0x118>
 8003e5c:	2d00      	cmp	r5, #0
 8003e5e:	d04d      	beq.n	8003efc <_printf_i+0x1b4>
 8003e60:	4615      	mov	r5, r2
 8003e62:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e66:	fb03 6711 	mls	r7, r3, r1, r6
 8003e6a:	5dc7      	ldrb	r7, [r0, r7]
 8003e6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e70:	4637      	mov	r7, r6
 8003e72:	42bb      	cmp	r3, r7
 8003e74:	460e      	mov	r6, r1
 8003e76:	d9f4      	bls.n	8003e62 <_printf_i+0x11a>
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d10b      	bne.n	8003e94 <_printf_i+0x14c>
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	07de      	lsls	r6, r3, #31
 8003e80:	d508      	bpl.n	8003e94 <_printf_i+0x14c>
 8003e82:	6923      	ldr	r3, [r4, #16]
 8003e84:	6861      	ldr	r1, [r4, #4]
 8003e86:	4299      	cmp	r1, r3
 8003e88:	bfde      	ittt	le
 8003e8a:	2330      	movle	r3, #48	; 0x30
 8003e8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e94:	1b52      	subs	r2, r2, r5
 8003e96:	6122      	str	r2, [r4, #16]
 8003e98:	f8cd a000 	str.w	sl, [sp]
 8003e9c:	464b      	mov	r3, r9
 8003e9e:	aa03      	add	r2, sp, #12
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	4640      	mov	r0, r8
 8003ea4:	f7ff fee2 	bl	8003c6c <_printf_common>
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	d14c      	bne.n	8003f46 <_printf_i+0x1fe>
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	b004      	add	sp, #16
 8003eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb6:	4835      	ldr	r0, [pc, #212]	; (8003f8c <_printf_i+0x244>)
 8003eb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ebc:	6829      	ldr	r1, [r5, #0]
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ec4:	6029      	str	r1, [r5, #0]
 8003ec6:	061d      	lsls	r5, r3, #24
 8003ec8:	d514      	bpl.n	8003ef4 <_printf_i+0x1ac>
 8003eca:	07df      	lsls	r7, r3, #31
 8003ecc:	bf44      	itt	mi
 8003ece:	f043 0320 	orrmi.w	r3, r3, #32
 8003ed2:	6023      	strmi	r3, [r4, #0]
 8003ed4:	b91e      	cbnz	r6, 8003ede <_printf_i+0x196>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	f023 0320 	bic.w	r3, r3, #32
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	2310      	movs	r3, #16
 8003ee0:	e7b0      	b.n	8003e44 <_printf_i+0xfc>
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	f043 0320 	orr.w	r3, r3, #32
 8003ee8:	6023      	str	r3, [r4, #0]
 8003eea:	2378      	movs	r3, #120	; 0x78
 8003eec:	4828      	ldr	r0, [pc, #160]	; (8003f90 <_printf_i+0x248>)
 8003eee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ef2:	e7e3      	b.n	8003ebc <_printf_i+0x174>
 8003ef4:	0659      	lsls	r1, r3, #25
 8003ef6:	bf48      	it	mi
 8003ef8:	b2b6      	uxthmi	r6, r6
 8003efa:	e7e6      	b.n	8003eca <_printf_i+0x182>
 8003efc:	4615      	mov	r5, r2
 8003efe:	e7bb      	b.n	8003e78 <_printf_i+0x130>
 8003f00:	682b      	ldr	r3, [r5, #0]
 8003f02:	6826      	ldr	r6, [r4, #0]
 8003f04:	6961      	ldr	r1, [r4, #20]
 8003f06:	1d18      	adds	r0, r3, #4
 8003f08:	6028      	str	r0, [r5, #0]
 8003f0a:	0635      	lsls	r5, r6, #24
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	d501      	bpl.n	8003f14 <_printf_i+0x1cc>
 8003f10:	6019      	str	r1, [r3, #0]
 8003f12:	e002      	b.n	8003f1a <_printf_i+0x1d2>
 8003f14:	0670      	lsls	r0, r6, #25
 8003f16:	d5fb      	bpl.n	8003f10 <_printf_i+0x1c8>
 8003f18:	8019      	strh	r1, [r3, #0]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	6123      	str	r3, [r4, #16]
 8003f1e:	4615      	mov	r5, r2
 8003f20:	e7ba      	b.n	8003e98 <_printf_i+0x150>
 8003f22:	682b      	ldr	r3, [r5, #0]
 8003f24:	1d1a      	adds	r2, r3, #4
 8003f26:	602a      	str	r2, [r5, #0]
 8003f28:	681d      	ldr	r5, [r3, #0]
 8003f2a:	6862      	ldr	r2, [r4, #4]
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4628      	mov	r0, r5
 8003f30:	f7fc f96e 	bl	8000210 <memchr>
 8003f34:	b108      	cbz	r0, 8003f3a <_printf_i+0x1f2>
 8003f36:	1b40      	subs	r0, r0, r5
 8003f38:	6060      	str	r0, [r4, #4]
 8003f3a:	6863      	ldr	r3, [r4, #4]
 8003f3c:	6123      	str	r3, [r4, #16]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f44:	e7a8      	b.n	8003e98 <_printf_i+0x150>
 8003f46:	6923      	ldr	r3, [r4, #16]
 8003f48:	462a      	mov	r2, r5
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	4640      	mov	r0, r8
 8003f4e:	47d0      	blx	sl
 8003f50:	3001      	adds	r0, #1
 8003f52:	d0ab      	beq.n	8003eac <_printf_i+0x164>
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	079b      	lsls	r3, r3, #30
 8003f58:	d413      	bmi.n	8003f82 <_printf_i+0x23a>
 8003f5a:	68e0      	ldr	r0, [r4, #12]
 8003f5c:	9b03      	ldr	r3, [sp, #12]
 8003f5e:	4298      	cmp	r0, r3
 8003f60:	bfb8      	it	lt
 8003f62:	4618      	movlt	r0, r3
 8003f64:	e7a4      	b.n	8003eb0 <_printf_i+0x168>
 8003f66:	2301      	movs	r3, #1
 8003f68:	4632      	mov	r2, r6
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	4640      	mov	r0, r8
 8003f6e:	47d0      	blx	sl
 8003f70:	3001      	adds	r0, #1
 8003f72:	d09b      	beq.n	8003eac <_printf_i+0x164>
 8003f74:	3501      	adds	r5, #1
 8003f76:	68e3      	ldr	r3, [r4, #12]
 8003f78:	9903      	ldr	r1, [sp, #12]
 8003f7a:	1a5b      	subs	r3, r3, r1
 8003f7c:	42ab      	cmp	r3, r5
 8003f7e:	dcf2      	bgt.n	8003f66 <_printf_i+0x21e>
 8003f80:	e7eb      	b.n	8003f5a <_printf_i+0x212>
 8003f82:	2500      	movs	r5, #0
 8003f84:	f104 0619 	add.w	r6, r4, #25
 8003f88:	e7f5      	b.n	8003f76 <_printf_i+0x22e>
 8003f8a:	bf00      	nop
 8003f8c:	08004331 	.word	0x08004331
 8003f90:	08004342 	.word	0x08004342

08003f94 <memcpy>:
 8003f94:	440a      	add	r2, r1
 8003f96:	4291      	cmp	r1, r2
 8003f98:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f9c:	d100      	bne.n	8003fa0 <memcpy+0xc>
 8003f9e:	4770      	bx	lr
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003faa:	4291      	cmp	r1, r2
 8003fac:	d1f9      	bne.n	8003fa2 <memcpy+0xe>
 8003fae:	bd10      	pop	{r4, pc}

08003fb0 <memmove>:
 8003fb0:	4288      	cmp	r0, r1
 8003fb2:	b510      	push	{r4, lr}
 8003fb4:	eb01 0402 	add.w	r4, r1, r2
 8003fb8:	d902      	bls.n	8003fc0 <memmove+0x10>
 8003fba:	4284      	cmp	r4, r0
 8003fbc:	4623      	mov	r3, r4
 8003fbe:	d807      	bhi.n	8003fd0 <memmove+0x20>
 8003fc0:	1e43      	subs	r3, r0, #1
 8003fc2:	42a1      	cmp	r1, r4
 8003fc4:	d008      	beq.n	8003fd8 <memmove+0x28>
 8003fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fce:	e7f8      	b.n	8003fc2 <memmove+0x12>
 8003fd0:	4402      	add	r2, r0
 8003fd2:	4601      	mov	r1, r0
 8003fd4:	428a      	cmp	r2, r1
 8003fd6:	d100      	bne.n	8003fda <memmove+0x2a>
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fe2:	e7f7      	b.n	8003fd4 <memmove+0x24>

08003fe4 <_free_r>:
 8003fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fe6:	2900      	cmp	r1, #0
 8003fe8:	d044      	beq.n	8004074 <_free_r+0x90>
 8003fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fee:	9001      	str	r0, [sp, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8003ff6:	bfb8      	it	lt
 8003ff8:	18e4      	addlt	r4, r4, r3
 8003ffa:	f000 f913 	bl	8004224 <__malloc_lock>
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <_free_r+0x94>)
 8004000:	9801      	ldr	r0, [sp, #4]
 8004002:	6813      	ldr	r3, [r2, #0]
 8004004:	b933      	cbnz	r3, 8004014 <_free_r+0x30>
 8004006:	6063      	str	r3, [r4, #4]
 8004008:	6014      	str	r4, [r2, #0]
 800400a:	b003      	add	sp, #12
 800400c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004010:	f000 b90e 	b.w	8004230 <__malloc_unlock>
 8004014:	42a3      	cmp	r3, r4
 8004016:	d908      	bls.n	800402a <_free_r+0x46>
 8004018:	6825      	ldr	r5, [r4, #0]
 800401a:	1961      	adds	r1, r4, r5
 800401c:	428b      	cmp	r3, r1
 800401e:	bf01      	itttt	eq
 8004020:	6819      	ldreq	r1, [r3, #0]
 8004022:	685b      	ldreq	r3, [r3, #4]
 8004024:	1949      	addeq	r1, r1, r5
 8004026:	6021      	streq	r1, [r4, #0]
 8004028:	e7ed      	b.n	8004006 <_free_r+0x22>
 800402a:	461a      	mov	r2, r3
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	b10b      	cbz	r3, 8004034 <_free_r+0x50>
 8004030:	42a3      	cmp	r3, r4
 8004032:	d9fa      	bls.n	800402a <_free_r+0x46>
 8004034:	6811      	ldr	r1, [r2, #0]
 8004036:	1855      	adds	r5, r2, r1
 8004038:	42a5      	cmp	r5, r4
 800403a:	d10b      	bne.n	8004054 <_free_r+0x70>
 800403c:	6824      	ldr	r4, [r4, #0]
 800403e:	4421      	add	r1, r4
 8004040:	1854      	adds	r4, r2, r1
 8004042:	42a3      	cmp	r3, r4
 8004044:	6011      	str	r1, [r2, #0]
 8004046:	d1e0      	bne.n	800400a <_free_r+0x26>
 8004048:	681c      	ldr	r4, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	6053      	str	r3, [r2, #4]
 800404e:	4421      	add	r1, r4
 8004050:	6011      	str	r1, [r2, #0]
 8004052:	e7da      	b.n	800400a <_free_r+0x26>
 8004054:	d902      	bls.n	800405c <_free_r+0x78>
 8004056:	230c      	movs	r3, #12
 8004058:	6003      	str	r3, [r0, #0]
 800405a:	e7d6      	b.n	800400a <_free_r+0x26>
 800405c:	6825      	ldr	r5, [r4, #0]
 800405e:	1961      	adds	r1, r4, r5
 8004060:	428b      	cmp	r3, r1
 8004062:	bf04      	itt	eq
 8004064:	6819      	ldreq	r1, [r3, #0]
 8004066:	685b      	ldreq	r3, [r3, #4]
 8004068:	6063      	str	r3, [r4, #4]
 800406a:	bf04      	itt	eq
 800406c:	1949      	addeq	r1, r1, r5
 800406e:	6021      	streq	r1, [r4, #0]
 8004070:	6054      	str	r4, [r2, #4]
 8004072:	e7ca      	b.n	800400a <_free_r+0x26>
 8004074:	b003      	add	sp, #12
 8004076:	bd30      	pop	{r4, r5, pc}
 8004078:	200003ac 	.word	0x200003ac

0800407c <sbrk_aligned>:
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	4e0e      	ldr	r6, [pc, #56]	; (80040b8 <sbrk_aligned+0x3c>)
 8004080:	460c      	mov	r4, r1
 8004082:	6831      	ldr	r1, [r6, #0]
 8004084:	4605      	mov	r5, r0
 8004086:	b911      	cbnz	r1, 800408e <sbrk_aligned+0x12>
 8004088:	f000 f8bc 	bl	8004204 <_sbrk_r>
 800408c:	6030      	str	r0, [r6, #0]
 800408e:	4621      	mov	r1, r4
 8004090:	4628      	mov	r0, r5
 8004092:	f000 f8b7 	bl	8004204 <_sbrk_r>
 8004096:	1c43      	adds	r3, r0, #1
 8004098:	d00a      	beq.n	80040b0 <sbrk_aligned+0x34>
 800409a:	1cc4      	adds	r4, r0, #3
 800409c:	f024 0403 	bic.w	r4, r4, #3
 80040a0:	42a0      	cmp	r0, r4
 80040a2:	d007      	beq.n	80040b4 <sbrk_aligned+0x38>
 80040a4:	1a21      	subs	r1, r4, r0
 80040a6:	4628      	mov	r0, r5
 80040a8:	f000 f8ac 	bl	8004204 <_sbrk_r>
 80040ac:	3001      	adds	r0, #1
 80040ae:	d101      	bne.n	80040b4 <sbrk_aligned+0x38>
 80040b0:	f04f 34ff 	mov.w	r4, #4294967295
 80040b4:	4620      	mov	r0, r4
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	200003b0 	.word	0x200003b0

080040bc <_malloc_r>:
 80040bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c0:	1ccd      	adds	r5, r1, #3
 80040c2:	f025 0503 	bic.w	r5, r5, #3
 80040c6:	3508      	adds	r5, #8
 80040c8:	2d0c      	cmp	r5, #12
 80040ca:	bf38      	it	cc
 80040cc:	250c      	movcc	r5, #12
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	4607      	mov	r7, r0
 80040d2:	db01      	blt.n	80040d8 <_malloc_r+0x1c>
 80040d4:	42a9      	cmp	r1, r5
 80040d6:	d905      	bls.n	80040e4 <_malloc_r+0x28>
 80040d8:	230c      	movs	r3, #12
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	2600      	movs	r6, #0
 80040de:	4630      	mov	r0, r6
 80040e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e4:	4e2e      	ldr	r6, [pc, #184]	; (80041a0 <_malloc_r+0xe4>)
 80040e6:	f000 f89d 	bl	8004224 <__malloc_lock>
 80040ea:	6833      	ldr	r3, [r6, #0]
 80040ec:	461c      	mov	r4, r3
 80040ee:	bb34      	cbnz	r4, 800413e <_malloc_r+0x82>
 80040f0:	4629      	mov	r1, r5
 80040f2:	4638      	mov	r0, r7
 80040f4:	f7ff ffc2 	bl	800407c <sbrk_aligned>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	4604      	mov	r4, r0
 80040fc:	d14d      	bne.n	800419a <_malloc_r+0xde>
 80040fe:	6834      	ldr	r4, [r6, #0]
 8004100:	4626      	mov	r6, r4
 8004102:	2e00      	cmp	r6, #0
 8004104:	d140      	bne.n	8004188 <_malloc_r+0xcc>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	4631      	mov	r1, r6
 800410a:	4638      	mov	r0, r7
 800410c:	eb04 0803 	add.w	r8, r4, r3
 8004110:	f000 f878 	bl	8004204 <_sbrk_r>
 8004114:	4580      	cmp	r8, r0
 8004116:	d13a      	bne.n	800418e <_malloc_r+0xd2>
 8004118:	6821      	ldr	r1, [r4, #0]
 800411a:	3503      	adds	r5, #3
 800411c:	1a6d      	subs	r5, r5, r1
 800411e:	f025 0503 	bic.w	r5, r5, #3
 8004122:	3508      	adds	r5, #8
 8004124:	2d0c      	cmp	r5, #12
 8004126:	bf38      	it	cc
 8004128:	250c      	movcc	r5, #12
 800412a:	4629      	mov	r1, r5
 800412c:	4638      	mov	r0, r7
 800412e:	f7ff ffa5 	bl	800407c <sbrk_aligned>
 8004132:	3001      	adds	r0, #1
 8004134:	d02b      	beq.n	800418e <_malloc_r+0xd2>
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	442b      	add	r3, r5
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	e00e      	b.n	800415c <_malloc_r+0xa0>
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	1b52      	subs	r2, r2, r5
 8004142:	d41e      	bmi.n	8004182 <_malloc_r+0xc6>
 8004144:	2a0b      	cmp	r2, #11
 8004146:	d916      	bls.n	8004176 <_malloc_r+0xba>
 8004148:	1961      	adds	r1, r4, r5
 800414a:	42a3      	cmp	r3, r4
 800414c:	6025      	str	r5, [r4, #0]
 800414e:	bf18      	it	ne
 8004150:	6059      	strne	r1, [r3, #4]
 8004152:	6863      	ldr	r3, [r4, #4]
 8004154:	bf08      	it	eq
 8004156:	6031      	streq	r1, [r6, #0]
 8004158:	5162      	str	r2, [r4, r5]
 800415a:	604b      	str	r3, [r1, #4]
 800415c:	4638      	mov	r0, r7
 800415e:	f104 060b 	add.w	r6, r4, #11
 8004162:	f000 f865 	bl	8004230 <__malloc_unlock>
 8004166:	f026 0607 	bic.w	r6, r6, #7
 800416a:	1d23      	adds	r3, r4, #4
 800416c:	1af2      	subs	r2, r6, r3
 800416e:	d0b6      	beq.n	80040de <_malloc_r+0x22>
 8004170:	1b9b      	subs	r3, r3, r6
 8004172:	50a3      	str	r3, [r4, r2]
 8004174:	e7b3      	b.n	80040de <_malloc_r+0x22>
 8004176:	6862      	ldr	r2, [r4, #4]
 8004178:	42a3      	cmp	r3, r4
 800417a:	bf0c      	ite	eq
 800417c:	6032      	streq	r2, [r6, #0]
 800417e:	605a      	strne	r2, [r3, #4]
 8004180:	e7ec      	b.n	800415c <_malloc_r+0xa0>
 8004182:	4623      	mov	r3, r4
 8004184:	6864      	ldr	r4, [r4, #4]
 8004186:	e7b2      	b.n	80040ee <_malloc_r+0x32>
 8004188:	4634      	mov	r4, r6
 800418a:	6876      	ldr	r6, [r6, #4]
 800418c:	e7b9      	b.n	8004102 <_malloc_r+0x46>
 800418e:	230c      	movs	r3, #12
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	4638      	mov	r0, r7
 8004194:	f000 f84c 	bl	8004230 <__malloc_unlock>
 8004198:	e7a1      	b.n	80040de <_malloc_r+0x22>
 800419a:	6025      	str	r5, [r4, #0]
 800419c:	e7de      	b.n	800415c <_malloc_r+0xa0>
 800419e:	bf00      	nop
 80041a0:	200003ac 	.word	0x200003ac

080041a4 <_realloc_r>:
 80041a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a8:	4680      	mov	r8, r0
 80041aa:	4614      	mov	r4, r2
 80041ac:	460e      	mov	r6, r1
 80041ae:	b921      	cbnz	r1, 80041ba <_realloc_r+0x16>
 80041b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041b4:	4611      	mov	r1, r2
 80041b6:	f7ff bf81 	b.w	80040bc <_malloc_r>
 80041ba:	b92a      	cbnz	r2, 80041c8 <_realloc_r+0x24>
 80041bc:	f7ff ff12 	bl	8003fe4 <_free_r>
 80041c0:	4625      	mov	r5, r4
 80041c2:	4628      	mov	r0, r5
 80041c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c8:	f000 f838 	bl	800423c <_malloc_usable_size_r>
 80041cc:	4284      	cmp	r4, r0
 80041ce:	4607      	mov	r7, r0
 80041d0:	d802      	bhi.n	80041d8 <_realloc_r+0x34>
 80041d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041d6:	d812      	bhi.n	80041fe <_realloc_r+0x5a>
 80041d8:	4621      	mov	r1, r4
 80041da:	4640      	mov	r0, r8
 80041dc:	f7ff ff6e 	bl	80040bc <_malloc_r>
 80041e0:	4605      	mov	r5, r0
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d0ed      	beq.n	80041c2 <_realloc_r+0x1e>
 80041e6:	42bc      	cmp	r4, r7
 80041e8:	4622      	mov	r2, r4
 80041ea:	4631      	mov	r1, r6
 80041ec:	bf28      	it	cs
 80041ee:	463a      	movcs	r2, r7
 80041f0:	f7ff fed0 	bl	8003f94 <memcpy>
 80041f4:	4631      	mov	r1, r6
 80041f6:	4640      	mov	r0, r8
 80041f8:	f7ff fef4 	bl	8003fe4 <_free_r>
 80041fc:	e7e1      	b.n	80041c2 <_realloc_r+0x1e>
 80041fe:	4635      	mov	r5, r6
 8004200:	e7df      	b.n	80041c2 <_realloc_r+0x1e>
	...

08004204 <_sbrk_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4d06      	ldr	r5, [pc, #24]	; (8004220 <_sbrk_r+0x1c>)
 8004208:	2300      	movs	r3, #0
 800420a:	4604      	mov	r4, r0
 800420c:	4608      	mov	r0, r1
 800420e:	602b      	str	r3, [r5, #0]
 8004210:	f7fc fdc0 	bl	8000d94 <_sbrk>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_sbrk_r+0x1a>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	b103      	cbz	r3, 800421e <_sbrk_r+0x1a>
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	200003b4 	.word	0x200003b4

08004224 <__malloc_lock>:
 8004224:	4801      	ldr	r0, [pc, #4]	; (800422c <__malloc_lock+0x8>)
 8004226:	f000 b811 	b.w	800424c <__retarget_lock_acquire_recursive>
 800422a:	bf00      	nop
 800422c:	200003b8 	.word	0x200003b8

08004230 <__malloc_unlock>:
 8004230:	4801      	ldr	r0, [pc, #4]	; (8004238 <__malloc_unlock+0x8>)
 8004232:	f000 b80c 	b.w	800424e <__retarget_lock_release_recursive>
 8004236:	bf00      	nop
 8004238:	200003b8 	.word	0x200003b8

0800423c <_malloc_usable_size_r>:
 800423c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004240:	1f18      	subs	r0, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	bfbc      	itt	lt
 8004246:	580b      	ldrlt	r3, [r1, r0]
 8004248:	18c0      	addlt	r0, r0, r3
 800424a:	4770      	bx	lr

0800424c <__retarget_lock_acquire_recursive>:
 800424c:	4770      	bx	lr

0800424e <__retarget_lock_release_recursive>:
 800424e:	4770      	bx	lr

08004250 <_init>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr

0800425c <_fini>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	bf00      	nop
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr
